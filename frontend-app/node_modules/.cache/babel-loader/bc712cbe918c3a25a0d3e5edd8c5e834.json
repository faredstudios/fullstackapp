{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Auction = exports.AuctionData = exports.PriceFloor = exports.BidState = exports.Bid = exports.PriceFloorType = exports.BidStateType = exports.AuctionState = void 0;\n\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst buffer_1 = require(\"buffer\");\n\nconst AuctionProgram_1 = require(\"../AuctionProgram\");\n\nconst BidderMetadata_1 = require(\"./BidderMetadata\");\n\nconst BidderPot_1 = require(\"./BidderPot\");\n\nvar AuctionState;\n\n(function (AuctionState) {\n  AuctionState[AuctionState[\"Created\"] = 0] = \"Created\";\n  AuctionState[AuctionState[\"Started\"] = 1] = \"Started\";\n  AuctionState[AuctionState[\"Ended\"] = 2] = \"Ended\";\n})(AuctionState = exports.AuctionState || (exports.AuctionState = {}));\n\nvar BidStateType;\n\n(function (BidStateType) {\n  BidStateType[BidStateType[\"EnglishAuction\"] = 0] = \"EnglishAuction\";\n  BidStateType[BidStateType[\"OpenEdition\"] = 1] = \"OpenEdition\";\n})(BidStateType = exports.BidStateType || (exports.BidStateType = {}));\n\nvar PriceFloorType;\n\n(function (PriceFloorType) {\n  PriceFloorType[PriceFloorType[\"None\"] = 0] = \"None\";\n  PriceFloorType[PriceFloorType[\"Minimum\"] = 1] = \"Minimum\";\n  PriceFloorType[PriceFloorType[\"BlindedPrice\"] = 2] = \"BlindedPrice\";\n})(PriceFloorType = exports.PriceFloorType || (exports.PriceFloorType = {}));\n\nclass Bid extends mpl_core_1.Borsh.Data {}\n\nexports.Bid = Bid;\nBid.SCHEMA = Bid.struct([['key', 'pubkeyAsString'], ['amount', 'u64']]);\n\nclass BidState extends mpl_core_1.Borsh.Data {\n  getWinnerAt(winnerIndex) {\n    const convertedIndex = this.bids.length - winnerIndex - 1;\n\n    if (convertedIndex >= 0 && convertedIndex < this.bids.length) {\n      return this.bids[convertedIndex].key;\n    } else {\n      return null;\n    }\n  }\n\n  getAmountAt(winnerIndex) {\n    const convertedIndex = this.bids.length - winnerIndex - 1;\n\n    if (convertedIndex >= 0 && convertedIndex < this.bids.length) {\n      return this.bids[convertedIndex].amount;\n    } else {\n      return null;\n    }\n  }\n\n  getWinnerIndex(bidder) {\n    if (!this.bids) {\n      return null;\n    }\n\n    const index = this.bids.findIndex(b => b.key === bidder);\n\n    if (index !== -1) {\n      const zeroBased = this.bids.length - index - 1;\n      return zeroBased < this.max.toNumber() ? zeroBased : null;\n    }\n\n    return null;\n  }\n\n}\n\nexports.BidState = BidState;\nBidState.SCHEMA = new Map([...Bid.SCHEMA, ...BidState.struct([['type', 'u8'], ['bids', [Bid]], ['max', 'u64']])]);\n\nclass PriceFloor extends mpl_core_1.Borsh.Data {\n  constructor(args) {\n    super();\n    this.type = args.type;\n    this.hash = args.hash || new Uint8Array(32);\n\n    if (this.type === PriceFloorType.Minimum) {\n      if (args.minPrice) {\n        this.hash.set(args.minPrice.toArrayLike(buffer_1.Buffer, 'le', 8), 0);\n      } else {\n        this.minPrice = new bn_js_1.default((args.hash || new Uint8Array(0)).slice(0, 8), 'le');\n      }\n    }\n  }\n\n}\n\nexports.PriceFloor = PriceFloor;\nPriceFloor.SCHEMA = PriceFloor.struct([['type', 'u8'], ['hash', [32]]]);\n\nclass AuctionData extends mpl_core_1.Borsh.Data {}\n\nexports.AuctionData = AuctionData;\nAuctionData.SCHEMA = new Map([...BidState.SCHEMA, ...PriceFloor.SCHEMA, ...AuctionData.struct([['authority', 'pubkeyAsString'], ['tokenMint', 'pubkeyAsString'], ['lastBid', {\n  kind: 'option',\n  type: 'u64'\n}], ['endedAt', {\n  kind: 'option',\n  type: 'u64'\n}], ['endAuctionAt', {\n  kind: 'option',\n  type: 'u64'\n}], ['auctionGap', {\n  kind: 'option',\n  type: 'u64'\n}], ['priceFloor', PriceFloor], ['state', 'u8'], ['bidState', BidState]])]);\n\nclass Auction extends mpl_core_1.Account {\n  constructor(pubkey, info) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(AuctionProgram_1.AuctionProgram.PUBKEY)) {\n      throw (0, mpl_core_1.ERROR_INVALID_OWNER)();\n    }\n\n    this.data = AuctionData.deserialize(this.info.data);\n  }\n\n  static getPDA(vault) {\n    return AuctionProgram_1.AuctionProgram.findProgramAddress([buffer_1.Buffer.from(AuctionProgram_1.AuctionProgram.PREFIX), AuctionProgram_1.AuctionProgram.PUBKEY.toBuffer(), new web3_js_1.PublicKey(vault).toBuffer()]);\n  }\n\n  static findMany(connection) {\n    let filters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      return (yield AuctionProgram_1.AuctionProgram.getProgramAccounts(connection, {\n        filters: [filters.authority && {\n          memcmp: {\n            offset: 0,\n            bytes: new web3_js_1.PublicKey(filters.authority).toBase58()\n          }\n        }].filter(Boolean)\n      })).map(account => {\n        try {\n          return Auction.from(account);\n        } catch (err) {}\n      }).filter(Boolean);\n    });\n  }\n\n  getBidderPots(connection) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return (yield AuctionProgram_1.AuctionProgram.getProgramAccounts(connection, {\n        filters: [{\n          dataSize: BidderPot_1.BidderPot.DATA_SIZE\n        }, {\n          memcmp: {\n            offset: 32 + 32,\n            bytes: this.pubkey.toBase58()\n          }\n        }]\n      })).map(account => BidderPot_1.BidderPot.from(account));\n    });\n  }\n\n  getBidderMetadata(connection) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return (yield AuctionProgram_1.AuctionProgram.getProgramAccounts(connection, {\n        filters: [{\n          dataSize: BidderMetadata_1.BidderMetadata.DATA_SIZE\n        }, {\n          memcmp: {\n            offset: 32,\n            bytes: this.pubkey.toBase58()\n          }\n        }]\n      })).map(account => BidderMetadata_1.BidderMetadata.from(account));\n    });\n  }\n\n}\n\nexports.Auction = Auction;\nAuction.EXTENDED_DATA_SIZE = 8 + 9 + 2 + 200;","map":{"version":3,"mappings":"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","names":["AuctionState","exports","BidStateType","PriceFloorType","Bid","mpl_core_1","Data","struct","BidState","getWinnerAt","winnerIndex","convertedIndex","bids","length","key","getAmountAt","amount","getWinnerIndex","bidder","index","findIndex","b","zeroBased","max","toNumber","Map","SCHEMA","PriceFloor","constructor","args","type","hash","Uint8Array","Minimum","minPrice","set","toArrayLike","buffer_1","bn_js_1","slice","AuctionData","kind","Auction","pubkey","info","assertOwner","AuctionProgram_1","PUBKEY","data","deserialize","getPDA","vault","findProgramAddress","from","PREFIX","toBuffer","web3_js_1","findMany","connection","filters","getProgramAccounts","authority","memcmp","offset","bytes","toBase58","filter","Boolean","map","account","err","getBidderPots","dataSize","BidderPot_1","DATA_SIZE","getBidderMetadata","BidderMetadata_1"],"sources":["../../../src/accounts/Auction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}