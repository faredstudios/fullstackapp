{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar _a;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WhitelistedCreator = exports.WhitelistedCreatorData = void 0;\n\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\n\nconst MetaplexProgram_1 = require(\"../MetaplexProgram\");\n\nconst buffer_1 = require(\"buffer\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nclass WhitelistedCreatorData extends mpl_core_1.Borsh.Data {\n  constructor(args) {\n    super(args);\n    this.key = MetaplexProgram_1.MetaplexKey.WhitelistedCreatorV1;\n    this.activated = true;\n    this.key = MetaplexProgram_1.MetaplexKey.WhitelistedCreatorV1;\n  }\n\n}\n\nexports.WhitelistedCreatorData = WhitelistedCreatorData;\n_a = WhitelistedCreatorData;\nWhitelistedCreatorData.SCHEMA = _a.struct([['key', 'u8'], ['address', 'pubkeyAsString'], ['activated', 'u8']]);\n\nclass WhitelistedCreator extends mpl_core_1.Account {\n  constructor(pubkey, info) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(MetaplexProgram_1.MetaplexProgram.PUBKEY)) {\n      throw (0, mpl_core_1.ERROR_INVALID_OWNER)();\n    }\n\n    if (!WhitelistedCreator.isCompatible(this.info.data)) {\n      throw (0, mpl_core_1.ERROR_INVALID_ACCOUNT_DATA)();\n    }\n\n    this.data = WhitelistedCreatorData.deserialize(this.info.data);\n  }\n\n  static isCompatible(data) {\n    return data[0] === MetaplexProgram_1.MetaplexKey.WhitelistedCreatorV1;\n  }\n\n  static getPDA(store, creator) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return MetaplexProgram_1.MetaplexProgram.findProgramAddress([buffer_1.Buffer.from(MetaplexProgram_1.MetaplexProgram.PREFIX), MetaplexProgram_1.MetaplexProgram.PUBKEY.toBuffer(), new web3_js_1.PublicKey(store).toBuffer(), new web3_js_1.PublicKey(creator).toBuffer()]);\n    });\n  }\n\n}\n\nexports.WhitelistedCreator = WhitelistedCreator;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAQA;;AACA;;AACA;;AAGA,MAAaA,sBAAb,SAA4CC,iBAAMC,IAAlD,CAA4D;AAiB1DC,cAAYC,IAAZ,EAAsB;AACpB,UAAMA,IAAN;AAXF,eAAmBC,8BAAYC,oBAA/B;AAEA,qBAAY,IAAZ;AAUE,SAAKC,GAAL,GAAWF,8BAAYC,oBAAvB;AACD;;AApByD;;AAA5DE;;AACkBR,gCAASS,EAAI,CAACC,MAAL,CAAY,CACnC,CAAC,KAAD,EAAQ,IAAR,CADmC,EAEnC,CAAC,SAAD,EAAY,gBAAZ,CAFmC,EAGnC,CAAC,WAAD,EAAc,IAAd,CAHmC,CAAZ,CAAT;;AAsBlB,MAAaC,kBAAb,SAAwCV,kBAAxC,CAAuE;AACrEE,cAAYS,MAAZ,EAAkCC,IAAlC,EAA2D;AACzD,UAAMD,MAAN,EAAcC,IAAd;;AAEA,QAAI,CAAC,KAAKC,WAAL,CAAiBT,kCAAgBU,MAAjC,CAAL,EAA+C;AAC7C,YAAM,qCAAN;AACD;;AAED,QAAI,CAACJ,kBAAkB,CAACK,YAAnB,CAAgC,KAAKH,IAAL,CAAUI,IAA1C,CAAL,EAAsD;AACpD,YAAM,4CAAN;AACD;;AAED,SAAKA,IAAL,GAAYjB,sBAAsB,CAACkB,WAAvB,CAAmC,KAAKL,IAAL,CAAUI,IAA7C,CAAZ;AACD;;AAEkB,SAAZD,YAAY,CAACC,IAAD,EAAa;AAC9B,WAAOA,IAAI,CAAC,CAAD,CAAJ,KAAYZ,8BAAYC,oBAA/B;AACD;;AAEkB,SAANa,MAAM,CAACC,KAAD,EAAsBC,OAAtB,EAA2C;;AAC5D,aAAOhB,kCAAgBiB,kBAAhB,CAAmC,CACxCC,gBAAOC,IAAP,CAAYnB,kCAAgBoB,MAA5B,CADwC,EAExCpB,kCAAgBU,MAAhB,CAAuBW,QAAvB,EAFwC,EAGxC,IAAIC,mBAAJ,CAAcP,KAAd,EAAqBM,QAArB,EAHwC,EAIxC,IAAIC,mBAAJ,CAAcN,OAAd,EAAuBK,QAAvB,EAJwC,CAAnC,CAAP;AAMD;AAAA;;AA1BoE;;AAAvElB","names":["WhitelistedCreatorData","mpl_core_1","Data","constructor","args","MetaplexProgram_1","WhitelistedCreatorV1","key","exports","_a","struct","WhitelistedCreator","pubkey","info","assertOwner","PUBKEY","isCompatible","data","deserialize","getPDA","store","creator","findProgramAddress","buffer_1","from","PREFIX","toBuffer","web3_js_1"],"sources":["../../../src/accounts/WhitelistedCreator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}