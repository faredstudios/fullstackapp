{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar _a, _b, _c;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Vault = exports.VaultData = exports.VaultState = exports.NumberOfShareArgs = exports.AmountArgs = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst bs58_1 = __importDefault(require(\"bs58\"));\n\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\n\nconst SafetyDepositBox_1 = require(\"./SafetyDepositBox\");\n\nconst VaultProgram_1 = require(\"../VaultProgram\");\n\nconst buffer_1 = require(\"buffer\");\n\nclass AmountArgs extends mpl_core_1.Borsh.Data {}\n\nexports.AmountArgs = AmountArgs;\n_a = AmountArgs;\nAmountArgs.SCHEMA = _a.struct([['instruction', 'u8'], ['amount', 'u64']]);\n\nclass NumberOfShareArgs extends mpl_core_1.Borsh.Data {}\n\nexports.NumberOfShareArgs = NumberOfShareArgs;\n_b = NumberOfShareArgs;\nNumberOfShareArgs.SCHEMA = _b.struct([['instruction', 'u8'], ['numberOfShares', 'u64']]);\nvar VaultState;\n\n(function (VaultState) {\n  VaultState[VaultState[\"Inactive\"] = 0] = \"Inactive\";\n  VaultState[VaultState[\"Active\"] = 1] = \"Active\";\n  VaultState[VaultState[\"Combined\"] = 2] = \"Combined\";\n  VaultState[VaultState[\"Deactivated\"] = 3] = \"Deactivated\";\n})(VaultState = exports.VaultState || (exports.VaultState = {}));\n\nclass VaultData extends mpl_core_1.Borsh.Data {\n  constructor(args) {\n    super(args);\n    this.key = VaultProgram_1.VaultKey.VaultV1;\n  }\n\n}\n\nexports.VaultData = VaultData;\n_c = VaultData;\nVaultData.SCHEMA = _c.struct([['key', 'u8'], ['tokenProgram', 'pubkeyAsString'], ['fractionMint', 'pubkeyAsString'], ['authority', 'pubkeyAsString'], ['fractionTreasury', 'pubkeyAsString'], ['redeemTreasury', 'pubkeyAsString'], ['allowFurtherShareCreation', 'u8'], ['pricingLookupAddress', 'pubkeyAsString'], ['tokenTypeCount', 'u8'], ['state', 'u8'], ['lockedPricePerShare', 'u64']]);\n\nclass Vault extends mpl_core_1.Account {\n  constructor(pubkey, info) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(VaultProgram_1.VaultProgram.PUBKEY)) {\n      throw (0, mpl_core_1.ERROR_INVALID_OWNER)();\n    }\n\n    if (!Vault.isCompatible(this.info.data)) {\n      throw (0, mpl_core_1.ERROR_INVALID_ACCOUNT_DATA)();\n    }\n\n    this.data = VaultData.deserialize(this.info.data);\n  }\n\n  static getPDA(pubkey) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return VaultProgram_1.VaultProgram.findProgramAddress([buffer_1.Buffer.from(VaultProgram_1.VaultProgram.PREFIX), VaultProgram_1.VaultProgram.PUBKEY.toBuffer(), new web3_js_1.PublicKey(pubkey).toBuffer()]);\n    });\n  }\n\n  static isCompatible(data) {\n    return data[0] === VaultProgram_1.VaultKey.VaultV1;\n  }\n\n  getSafetyDepositBoxes(connection) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return (yield VaultProgram_1.VaultProgram.getProgramAccounts(connection, {\n        filters: [{\n          memcmp: {\n            offset: 0,\n            bytes: bs58_1.default.encode(buffer_1.Buffer.from([VaultProgram_1.VaultKey.SafetyDepositBoxV1]))\n          }\n        }, {\n          memcmp: {\n            offset: 1,\n            bytes: this.pubkey.toBase58()\n          }\n        }]\n      })).map(account => SafetyDepositBox_1.SafetyDepositBox.from(account));\n    });\n  }\n\n}\n\nexports.Vault = Vault;\nVault.MAX_VAULT_SIZE = 1 + 32 + 32 + 32 + 32 + 1 + 32 + 1 + 32 + 1 + 1 + 8;\nVault.MAX_EXTERNAL_ACCOUNT_SIZE = 1 + 8 + 32 + 1;","map":{"version":3,"mappings":"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","names":["AmountArgs","mpl_core_1","Data","exports","_a","struct","NumberOfShareArgs","_b","VaultState","VaultData","constructor","args","key","VaultProgram_1","VaultV1","_c","Vault","pubkey","info","assertOwner","PUBKEY","isCompatible","data","deserialize","getPDA","findProgramAddress","buffer_1","from","PREFIX","toBuffer","web3_js_1","getSafetyDepositBoxes","connection","getProgramAccounts","filters","memcmp","offset","bytes","bs58_1","encode","SafetyDepositBoxV1","toBase58","map","account","SafetyDepositBox_1"],"sources":["../../../src/accounts/Vault.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}