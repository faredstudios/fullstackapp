{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Edition = exports.EditionData = void 0;\n\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\n\nconst MetadataProgram_1 = require(\"../MetadataProgram\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst buffer_1 = require(\"buffer\");\n\nclass EditionData extends mpl_core_1.Borsh.Data {\n  constructor(args) {\n    super(args);\n    this.key = MetadataProgram_1.MetadataKey.EditionV1;\n  }\n\n}\n\nexports.EditionData = EditionData;\nEditionData.SCHEMA = EditionData.struct([['key', 'u8'], ['parent', 'pubkeyAsString'], ['edition', 'u64']]);\n\nclass Edition extends mpl_core_1.Account {\n  constructor(key, info) {\n    super(key, info);\n\n    if (!this.assertOwner(MetadataProgram_1.MetadataProgram.PUBKEY)) {\n      throw (0, mpl_core_1.ERROR_INVALID_OWNER)();\n    }\n\n    if (!Edition.isCompatible(this.info.data)) {\n      throw (0, mpl_core_1.ERROR_INVALID_ACCOUNT_DATA)();\n    }\n\n    this.data = EditionData.deserialize(this.info.data);\n  }\n\n  static getPDA(mint) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return MetadataProgram_1.MetadataProgram.findProgramAddress([buffer_1.Buffer.from(MetadataProgram_1.MetadataProgram.PREFIX), MetadataProgram_1.MetadataProgram.PUBKEY.toBuffer(), new web3_js_1.PublicKey(mint).toBuffer(), buffer_1.Buffer.from(Edition.EDITION_PREFIX)]);\n    });\n  }\n\n  static isCompatible(data) {\n    return data[0] === MetadataProgram_1.MetadataKey.EditionV1;\n  }\n\n}\n\nexports.Edition = Edition;\nEdition.EDITION_PREFIX = 'edition';","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAQA;;AACA;;AAEA;;AAGA,MAAaA,WAAb,SAAiCC,iBAAMC,IAAvC,CAAiD;AAY/CC,cAAYC,IAAZ,EAAsB;AACpB,UAAMA,IAAN;AACA,SAAKC,GAAL,GAAWC,8BAAYC,SAAvB;AACD;;AAf8C;;AAAjDC;AACkBR,qBAASA,WAAW,CAACS,MAAZ,CAAmB,CAC1C,CAAC,KAAD,EAAQ,IAAR,CAD0C,EAE1C,CAAC,QAAD,EAAW,gBAAX,CAF0C,EAG1C,CAAC,SAAD,EAAY,KAAZ,CAH0C,CAAnB,CAAT;;AAiBlB,MAAaC,OAAb,SAA6BT,kBAA7B,CAAiD;AAG/CE,cAAYE,GAAZ,EAA+BM,IAA/B,EAAwD;AACtD,UAAMN,GAAN,EAAWM,IAAX;;AAEA,QAAI,CAAC,KAAKC,WAAL,CAAiBN,kCAAgBO,MAAjC,CAAL,EAA+C;AAC7C,YAAM,qCAAN;AACD;;AAED,QAAI,CAACH,OAAO,CAACI,YAAR,CAAqB,KAAKH,IAAL,CAAUI,IAA/B,CAAL,EAA2C;AACzC,YAAM,4CAAN;AACD;;AAED,SAAKA,IAAL,GAAYf,WAAW,CAACgB,WAAZ,CAAwB,KAAKL,IAAL,CAAUI,IAAlC,CAAZ;AACD;;AAEkB,SAANE,MAAM,CAACC,IAAD,EAAmB;;AACpC,aAAOZ,kCAAgBa,kBAAhB,CAAmC,CACxCC,gBAAOC,IAAP,CAAYf,kCAAgBgB,MAA5B,CADwC,EAExChB,kCAAgBO,MAAhB,CAAuBU,QAAvB,EAFwC,EAGxC,IAAIC,mBAAJ,CAAcN,IAAd,EAAoBK,QAApB,EAHwC,EAIxCH,gBAAOC,IAAP,CAAYX,OAAO,CAACe,cAApB,CAJwC,CAAnC,CAAP;AAMD;AAAA;;AAEkB,SAAZX,YAAY,CAACC,IAAD,EAAa;AAC9B,WAAOA,IAAI,CAAC,CAAD,CAAJ,KAAYT,8BAAYC,SAA/B;AACD;;AA5B8C;;AAAjDC;AACkBE,yBAAiB,SAAjB","names":["EditionData","mpl_core_1","Data","constructor","args","key","MetadataProgram_1","EditionV1","exports","struct","Edition","info","assertOwner","PUBKEY","isCompatible","data","deserialize","getPDA","mint","findProgramAddress","buffer_1","from","PREFIX","toBuffer","web3_js_1","EDITION_PREFIX"],"sources":["../../../src/accounts/Edition.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}