{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MSI\\\\Documents\\\\CG\\\\fullstackapp\\\\frontend-app\\\\src\\\\containers\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport { Routes, Route, useNavigate } from 'react-router-dom';\nimport '../components/styles/App.css';\nimport { Provider } from \"react-redux\";\nimport { configureStore } from '../store';\nimport SwitchRoute from './SwitchRoute';\nimport background from '../components/images/daytoner2.jpg';\nimport Navbar from './Navbar';\nimport { authUser } from \"../store/actions/auth\";\nimport { apiCall } from \"../services/api\";\nimport { Connection, PublicKey, Transaction, clusterApiUrl, SystemProgram, Keypair, LAMPORTS_PER_SOL, sendAndConfirmTransaction } from \"@solana/web3.js\";\nimport { Coingecko, programs } from '@metaplex/js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NETWORK = clusterApiUrl(\"devnet\");\nconst isPhantomInstalled = window.solana && window.solana.isPhantom;\nconst store = configureStore();\n\nconst App = () => {\n  _s();\n\n  const connection = new Connection(NETWORK);\n  const {\n    metadata: {\n      Metadata\n    }\n  } = programs;\n  const [, setConnected] = useState(false);\n  const [publicKey, setPublicKey] = useState({\n    publicKey: null\n  });\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [username, setUsername] = useState(null);\n  const [balance, setBalance] = useState(0);\n  const [balanceUSD, setBalanceUSD] = useState(0);\n  const navigate = useNavigate();\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n      const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          setPublicKey(response.publicKey); //console.log('Connected with Public Key:',publickey.walletID);\n\n          setWalletAddress(publickey.walletID); //const airdropSignature = await connection.requestAirdrop(response.publicKey,LAMPORTS_PER_SOL,);\n          //await connection.confirmTransaction(airdropSignature);\n\n          getAccountData(response);\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const getAccountData = async response => {\n    const publickey = {\n      walletID: response.publicKey.toString()\n    };\n    const account = await connection.getAccountInfo(response.publicKey);\n    setWalletAddress(publickey.walletID);\n    setConnected(true);\n    apiCall(\"post\", `/api/auth/signin`, publickey).then(_ref => {\n      let {\n        token,\n        ...user\n      } = _ref;\n      setUsername(user.username);\n      console.log(\"User found:\", user.username);\n    }).catch(err => {\n      console.log(\"User not registered\");\n      navigate(\"/register\");\n    }); //Find wallet balance and convert to USD\n\n    setBalance(account.lamports);\n    const CoinGecko = new Coingecko();\n    const solrate = CoinGecko.getRate(\"sol\", \"usd\").then(_ref2 => {\n      let {\n        result,\n        ...rate\n      } = _ref2;\n      var Rate = Object.values(rate)[0].rate;\n      setBalanceUSD((account.lamports / LAMPORTS_PER_SOL * Rate).toFixed(2));\n    }).catch(err => console.log(err));\n  };\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      setPublicKey(response.publicKey);\n      const publickey = {\n        walletID: response.publicKey.toString()\n      };\n      console.log('Connected with Public Key:', publickey.walletID);\n      setWalletAddress(publickey.walletID);\n      setConnected(true);\n      apiCall(\"post\", `/api/auth/signin`, publickey).then(_ref3 => {\n        let {\n          token,\n          ...user\n        } = _ref3;\n        setUsername(user.username);\n        console.log(\"User found:\", username);\n      }).catch(err => {\n        console.log(\"User not registered\");\n        navigate(\"/register\");\n      });\n      getAccountData(response);\n    }\n  };\n\n  const sendSol = async () => {\n    let fromKeypair = Keypair.generate();\n    let toKeypair = Keypair.generate();\n    let transaction = new Transaction();\n    transaction.add(SystemProgram.transfer({\n      fromPubkey: fromKeypair.publicKey,\n      toPubkey: toKeypair.publicKey,\n      lamports: LAMPORTS_PER_SOL\n    }));\n    sendAndConfirmTransaction(connection, transaction, [walletAddress]);\n  };\n\n  function logout() {\n    setWalletAddress(null);\n    setPublicKey(null);\n    setConnected(false);\n    window.solana.request({\n      method: \"disconnect\"\n    });\n    window.solana.on('disconnect', () => console.log(\"disconnected!\"));\n  }\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      class: \"connectbtn fullwidth\",\n      onClick: connectWallet,\n      children: \"CONNECT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Connect to Phantom Wallet to log in your account.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 3\n  }, this);\n\n  const renderConnectedUser = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          className: \"userName\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"userDP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 39\n          }, this), username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"dropdown\",\n          children: [!username && /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"settingsli\",\n            onClick: connectWallet,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#\",\n              children: \"Register Account\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 72\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"settingsli\",\n            onClick: connectWallet,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#\",\n              children: \"Change Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 58\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"settingsli\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#\",\n              children: \"Account Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 34\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"settingsli\",\n            onClick: sendSol,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#\",\n              children: \"Send SOL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 52\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"settingsli\",\n            onClick: logout,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#logout\",\n              children: \"Logout\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 51\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"userCurrency\",\n      children: [balanceUSD, \" USD \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 22\n      }, this), Number(balance / LAMPORTS_PER_SOL).toFixed(4), \" SOL\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"userSocial\",\n      children: \"Socials\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"friendlist\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"friendName\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"friendDP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 7\n        }, this), \" ExampleFriend01\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"friendName\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"friendDP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 7\n        }, this), \" ExampleFriend02\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"friendName\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"friendDP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 7\n        }, this), \" ExampleFriend03\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"friendName\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"friendDP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 7\n        }, this), \" ExampleFriend04\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 7\n  }, this);\n\n  useEffect(() => {\n    /*if (!provider) return;\r\n    \t\tprovider.on(\"accountChanged\", (publicKey: PublicKey | null) => {\r\n      setPublicKey(publicKey);\r\n      if (publicKey) {\r\n    \tconsole.log(\"[accountChanged] Switched account to \" + publicKey?.toBase58());\r\n      } else {\r\n    \tconsole.log(\"[accountChanged] Switched unknown account\");\r\n    \tprovider\r\n    \t  .connect()\r\n    \t  .then(() => console.log(\"[accountChanged] Reconnected successfully\"))\r\n    \t  .catch((err) => {\r\n    \t\tconsole.log(\"[accountChanged] Failed to re-connect: \" + err.message);\r\n    \t  });\r\n      }\r\n    });*/\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    store: store,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fadetop\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\",\n          children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(SwitchRoute, {\n            walletID: walletAddress,\n            username: username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sideBar\",\n        children: [walletAddress && renderConnectedUser(), !walletAddress && renderNotConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"1CeYNgUWblnOkY7K25A05c0Gc1A=\", false, function () {\n  return [useNavigate];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/MSI/Documents/CG/fullstackapp/frontend-app/src/containers/App.js"],"names":["React","Component","useEffect","useState","Routes","Route","useNavigate","Provider","configureStore","SwitchRoute","background","Navbar","authUser","apiCall","Connection","PublicKey","Transaction","clusterApiUrl","SystemProgram","Keypair","LAMPORTS_PER_SOL","sendAndConfirmTransaction","Coingecko","programs","NETWORK","isPhantomInstalled","window","solana","isPhantom","store","App","connection","metadata","Metadata","setConnected","publicKey","setPublicKey","walletAddress","setWalletAddress","username","setUsername","balance","setBalance","balanceUSD","setBalanceUSD","navigate","checkIfWalletIsConnected","console","log","response","connect","onlyIfTrusted","publickey","walletID","getAccountData","alert","error","toString","account","getAccountInfo","then","token","user","catch","err","lamports","CoinGecko","solrate","getRate","result","rate","Rate","Object","values","toFixed","connectWallet","sendSol","fromKeypair","generate","toKeypair","transaction","add","transfer","fromPubkey","toPubkey","logout","request","method","on","renderNotConnectedContainer","renderConnectedUser","Number","onLoad","addEventListener","removeEventListener"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,SAA1B,EAAqCC,QAArC,QAAoD,OAApD;AACA,SAAQC,MAAR,EAAgBC,KAAhB,EAAuBC,WAAvB,QAAyC,kBAAzC;AACA,OAAO,8BAAP;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,cAAT,QAA+B,UAA/B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAAQC,UAAR,EAAmBC,SAAnB,EAA6BC,WAA7B,EAAyCC,aAAzC,EAAuDC,aAAvD,EAAqEC,OAArE,EAA6EC,gBAA7E,EAA8FC,yBAA9F,QAA8H,iBAA9H;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,cAApC;;AAoBA,MAAMC,OAAO,GAAGP,aAAa,CAAC,QAAD,CAA7B;AACA,MAAMQ,kBAAkB,GAAGC,MAAM,CAACC,MAAP,IAAiBD,MAAM,CAACC,MAAP,CAAcC,SAA1D;AACA,MAAMC,KAAK,GAAGrB,cAAc,EAA5B;;AAGA,MAAMsB,GAAG,GAAG,MAAM;AAAA;;AACjB,QAAMC,UAAU,GAAG,IAAIjB,UAAJ,CAAeU,OAAf,CAAnB;AACA,QAAM;AAAEQ,IAAAA,QAAQ,EAAE;AAAEC,MAAAA;AAAF;AAAZ,MAA6BV,QAAnC;AACA,QAAM,GAAGW,YAAH,IAAmB/B,QAAQ,CAAC,KAAD,CAAjC;AACA,QAAM,CAACgC,SAAD,EAAYC,YAAZ,IAA4BjC,QAAQ,CAAC;AAACgC,IAAAA,SAAS,EAAC;AAAX,GAAD,CAA1C;AAEA,QAAM,CAACE,aAAD,EAAgBC,gBAAhB,IAAoCnC,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACoC,QAAD,EAAWC,WAAX,IAA0BrC,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACsC,OAAD,EAAUC,UAAV,IAAwBvC,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACwC,UAAD,EAAaC,aAAb,IAA8BzC,QAAQ,CAAC,CAAD,CAA5C;AAEA,QAAM0C,QAAQ,GAAGvC,WAAW,EAA5B;;AAIA,QAAMwC,wBAAwB,GAAG,YAAY;AAC5C,QAAI;AACH,YAAM;AAAEnB,QAAAA;AAAF,UAAaD,MAAnB;AACA,YAAMK,UAAU,GAAG,IAAIjB,UAAJ,CAAeG,aAAa,CAAC,QAAD,CAA5B,EAAuC,WAAvC,CAAnB;;AAEA,UAAIU,MAAJ,EAAY;AACX,YAAIA,MAAM,CAACC,SAAX,EAAsB;AACrBmB,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,gBAAMC,QAAQ,GAAG,MAAMtB,MAAM,CAACuB,OAAP,CAAe;AAAEC,YAAAA,aAAa,EAAE;AAAjB,WAAf,CAAvB;AACAf,UAAAA,YAAY,CAACa,QAAQ,CAACd,SAAV,CAAZ,CAHqB,CAIrB;;AACAG,UAAAA,gBAAgB,CAACc,SAAS,CAACC,QAAX,CAAhB,CALqB,CAMrB;AACA;;AAEAC,UAAAA,cAAc,CAACL,QAAD,CAAd;AAEC;AACD,OAbF,MAaQ;AACNM,QAAAA,KAAK,CAAC,+CAAD,CAAL;AACA;AACD,KApBF,CAoBG,OAAOC,KAAP,EAAc;AACfT,MAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACA;AACD,GAxBF;;AAyBA,QAAMF,cAAc,GAAG,MAAOL,QAAP,IAA+B;AAErD,UAAMG,SAAS,GAAG;AAACC,MAAAA,QAAQ,EAAEJ,QAAQ,CAACd,SAAT,CAAmBsB,QAAnB;AAAX,KAAlB;AACA,UAAMC,OAAO,GAAG,MAAM3B,UAAU,CAAC4B,cAAX,CAA0BV,QAAQ,CAACd,SAAnC,CAAtB;AAEAG,IAAAA,gBAAgB,CAACc,SAAS,CAACC,QAAX,CAAhB;AACAnB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACArB,IAAAA,OAAO,CAAC,MAAD,EAAU,kBAAV,EAA6BuC,SAA7B,CAAP,CAA+CQ,IAA/C,CAAoD,QAAsB;AAAA,UAArB;AAACC,QAAAA,KAAD;AAAQ,WAAGC;AAAX,OAAqB;AACzEtB,MAAAA,WAAW,CAACsB,IAAI,CAACvB,QAAN,CAAX;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0Bc,IAAI,CAACvB,QAA/B;AACA,KAHD,EAGGwB,KAHH,CAGSC,GAAG,IAAI;AACfjB,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAH,MAAAA,QAAQ,CAAC,WAAD,CAAR;AACA,KAND,EAPqD,CAerD;;AACAH,IAAAA,UAAU,CAACgB,OAAO,CAACO,QAAT,CAAV;AACA,UAAMC,SAAS,GAAG,IAAI5C,SAAJ,EAAlB;AACA,UAAM6C,OAAO,GAAGD,SAAS,CAACE,OAAV,CAAkB,KAAlB,EAAwB,KAAxB,EAA+BR,IAA/B,CAAoC,SAAuB;AAAA,UAAtB;AAACS,QAAAA,MAAD;AAAS,WAAGC;AAAZ,OAAsB;AAC1E,UAAIC,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAcH,IAAd,EAAoB,CAApB,EAAuBA,IAAlC;AACA1B,MAAAA,aAAa,CAAC,CAAEc,OAAO,CAACO,QAAR,GAAiB7C,gBAAlB,GAAoCmD,IAArC,EAA2CG,OAA3C,CAAmD,CAAnD,CAAD,CAAb;AACC,KAHc,EAGZX,KAHY,CAGLC,GAAG,IAAIjB,OAAO,CAACC,GAAR,CAAYgB,GAAZ,CAHF,CAAhB;AAIA,GAtBD;;AAwBA,QAAMW,aAAa,GAAG,YAAY;AAEjC,UAAM;AAAEhD,MAAAA;AAAF,QAAaD,MAAnB;;AACA,QAAIC,MAAJ,EAAY;AACX,YAAMsB,QAAQ,GAAG,MAAMtB,MAAM,CAACuB,OAAP,EAAvB;AACAd,MAAAA,YAAY,CAACa,QAAQ,CAACd,SAAV,CAAZ;AACA,YAAMiB,SAAS,GAAG;AAACC,QAAAA,QAAQ,EAAEJ,QAAQ,CAACd,SAAT,CAAmBsB,QAAnB;AAAX,OAAlB;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAAyCI,SAAS,CAACC,QAAnD;AACAf,MAAAA,gBAAgB,CAACc,SAAS,CAACC,QAAX,CAAhB;AAEAnB,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACArB,MAAAA,OAAO,CAAC,MAAD,EAAU,kBAAV,EAA6BuC,SAA7B,CAAP,CAA+CQ,IAA/C,CAAoD,SAAsB;AAAA,YAArB;AAACC,UAAAA,KAAD;AAAQ,aAAGC;AAAX,SAAqB;AACzEtB,QAAAA,WAAW,CAACsB,IAAI,CAACvB,QAAN,CAAX;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BT,QAA1B;AACA,OAHD,EAGGwB,KAHH,CAGSC,GAAG,IAAI;AACfjB,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAH,QAAAA,QAAQ,CAAC,WAAD,CAAR;AACA,OAND;AAQAS,MAAAA,cAAc,CAACL,QAAD,CAAd;AACA;AACD,GArBD;;AAsBA,QAAM2B,OAAO,GAAG,YAAY;AAC3B,QAAIC,WAAW,GAAG1D,OAAO,CAAC2D,QAAR,EAAlB;AACA,QAAIC,SAAS,GAAG5D,OAAO,CAAC2D,QAAR,EAAhB;AACA,QAAIE,WAAW,GAAG,IAAIhE,WAAJ,EAAlB;AAEAgE,IAAAA,WAAW,CAACC,GAAZ,CACE/D,aAAa,CAACgE,QAAd,CAAuB;AACxBC,MAAAA,UAAU,EAAEN,WAAW,CAAC1C,SADA;AAExBiD,MAAAA,QAAQ,EAAEL,SAAS,CAAC5C,SAFI;AAGxB8B,MAAAA,QAAQ,EAAE7C;AAHc,KAAvB,CADF;AAOAC,IAAAA,yBAAyB,CACvBU,UADuB,EAEvBiD,WAFuB,EAGvB,CAAC3C,aAAD,CAHuB,CAAzB;AAKA,GAjBD;;AAkBA,WAASgD,MAAT,GAAiB;AAChB/C,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAF,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAF,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAR,IAAAA,MAAM,CAACC,MAAP,CAAc2D,OAAd,CAAsB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAtB;AACA7D,IAAAA,MAAM,CAACC,MAAP,CAAc6D,EAAd,CAAiB,YAAjB,EAA+B,MAAMzC,OAAO,CAACC,GAAR,CAAY,eAAZ,CAArC;AACA;;AACD,QAAMyC,2BAA2B,GAAG,mBACnC;AAAA,4BACC;AAAQ,MAAA,KAAK,EAAC,sBAAd;AAAqC,MAAA,OAAO,EAAEd,aAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;;AAMC,QAAMe,mBAAmB,GAAG,mBACxB;AAAA,4BACH;AAAA,6BACC;AAAA,gCACC;AAAG,UAAA,IAAI,EAAC,GAAR;AAAY,UAAA,SAAS,EAAC,UAAtB;AAAA,kCAAiC;AAAK,YAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,kBAAjC,EAAgEnD,QAAhE;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC;AAAI,UAAA,SAAS,EAAC,UAAd;AAAA,qBACE,CAACA,QAAD,iBAAa;AAAI,YAAA,SAAS,EAAC,YAAd;AAA2B,YAAA,OAAO,EAAEoC,aAApC;AAAA,mCAAmD;AAAG,cAAA,IAAI,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAnD;AAAA;AAAA;AAAA;AAAA,kBADf,eAEC;AAAI,YAAA,SAAS,EAAC,YAAd;AAA2B,YAAA,OAAO,EAAEA,aAApC;AAAA,mCAAmD;AAAG,cAAA,IAAI,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAnD;AAAA;AAAA;AAAA;AAAA,kBAFD,eAGC;AAAI,YAAA,SAAS,EAAC,YAAd;AAAA,mCAA2B;AAAG,cAAA,IAAI,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA3B;AAAA;AAAA;AAAA;AAAA,kBAHD,eAIC;AAAI,YAAA,SAAS,EAAC,YAAd;AAA2B,YAAA,OAAO,EAAEC,OAApC;AAAA,mCAA6C;AAAG,cAAA,IAAI,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA7C;AAAA;AAAA;AAAA;AAAA,kBAJD,eAKC;AAAI,YAAA,SAAS,EAAC,YAAd;AAA2B,YAAA,OAAO,EAAES,MAApC;AAAA,mCAA4C;AAAG,cAAA,IAAI,EAAC,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5C;AAAA;AAAA;AAAA;AAAA,kBALD;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADG,eAaH;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,iBACE1C,UADF,wBACkB;AAAA;AAAA;AAAA;AAAA,cADlB,EAEEgD,MAAM,CAAClD,OAAO,GAACrB,gBAAT,CAAN,CAAiCsD,OAAjC,CAAyC,CAAzC,CAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAbG,eAiBH;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBG,eAoBF;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA,8BACC;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA,gCACC;AAAK,UAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,gBADD;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAIC;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA,gCACC;AAAK,UAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,gBADD;AAAA;AAAA;AAAA;AAAA;AAAA,cAJD,eAOC;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA,gCACC;AAAK,UAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,gBADD;AAAA;AAAA;AAAA;AAAA;AAAA,cAPD,eAUC;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA,gCACC;AAAK,UAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,gBADD;AAAA;AAAA;AAAA;AAAA;AAAA,cAVD;AAAA;AAAA;AAAA;AAAA;AAAA,YApBE;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;;AAsCDxE,EAAAA,SAAS,CAAC,MAAM;AACf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGE,UAAM0F,MAAM,GAAG,YAAY;AACxB,YAAM9C,wBAAwB,EAA9B;AACF,KAFD;;AAGApB,IAAAA,MAAM,CAACmE,gBAAP,CAAwB,MAAxB,EAAgCD,MAAhC;AACA,WAAO,MAAMlE,MAAM,CAACoE,mBAAP,CAA2B,MAA3B,EAAmCF,MAAnC,CAAb;AACC,GAvBO,EAuBL,EAvBK,CAAT;AAyBC,sBACA,QAAC,QAAD;AAAU,IAAA,KAAK,EAAE/D,KAAjB;AAAA,2BACC;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACC;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,+BACC;AAAK,UAAA,SAAS,EAAG,KAAjB;AAAA,kCACC,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,kBADD,eAEC,QAAC,WAAD;AAAa,YAAA,QAAQ,EAAEQ,aAAvB;AAAsC,YAAA,QAAQ,EAAEE;AAAhD;AAAA;AAAA;AAAA;AAAA,kBAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cADD,eAOC;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,mBACEF,aAAa,IAAIqD,mBAAmB,EADtC,EAEE,CAACrD,aAAD,IAAkBoD,2BAA2B,EAF/C;AAAA;AAAA;AAAA;AAAA;AAAA,cAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADA;AAgBD,CApMD;;GAAM3D,G;UAWYxB,W;;;KAXZwB,G;AAsMN,eAAeA,GAAf","sourcesContent":["import React, {Component, useEffect, useState} from 'react';\r\nimport {Routes, Route, useNavigate} from 'react-router-dom';\r\nimport '../components/styles/App.css';\r\nimport { Provider } from \"react-redux\";\r\nimport { configureStore } from '../store';\r\nimport SwitchRoute from './SwitchRoute';\r\nimport background from '../components/images/daytoner2.jpg';\r\nimport Navbar from './Navbar';\r\nimport { authUser } from \"../store/actions/auth\";\r\nimport { apiCall } from \"../services/api\";\r\nimport {Connection,PublicKey,Transaction,clusterApiUrl,SystemProgram,Keypair,LAMPORTS_PER_SOL,sendAndConfirmTransaction} from \"@solana/web3.js\";\r\nimport { Coingecko, programs } from '@metaplex/js';\r\n\r\ntype PhantomEvent = \"disconnect\" | \"connect\" | \"accountChanged\";\r\ninterface ConnectOpts {\r\n  onlyIfTrusted: boolean;\r\n}\r\ninterface PhantomProvider {\r\n  publicKey: PublicKey | null;\r\n  isConnected: boolean | null;\r\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\r\n  signAllTransactions: (transactions: Transaction[]) => Promise<Transaction[]>;\r\n  signMessage: (\r\n    message: Uint8Array | string,\r\n    display?: DisplayEncoding\r\n  ) => Promise<any>;\r\n  connect: (opts?: Partial<ConnectOpts>) => Promise<{ publicKey: PublicKey }>;\r\n  disconnect: () => Promise<void>;\r\n  on: (event: PhantomEvent, handler: (args: any) => void) => void;\r\n  request: (method: PhantomRequestMethod, params: any) => Promise<unknown>;\r\n}\r\nconst NETWORK = clusterApiUrl(\"devnet\");\r\nconst isPhantomInstalled = window.solana && window.solana.isPhantom\r\nconst store = configureStore()\r\n\r\n\r\nconst App = () => {\r\n\tconst connection = new Connection(NETWORK);\r\n\tconst { metadata: { Metadata } } = programs;\r\n\tconst [, setConnected] = useState(false);\r\n\tconst [publicKey, setPublicKey] = useState({publicKey:null});\r\n\r\n\tconst [walletAddress, setWalletAddress] = useState(null);\r\n\tconst [username, setUsername] = useState(null);\r\n\tconst [balance, setBalance] = useState(0);\r\n\tconst [balanceUSD, setBalanceUSD] = useState(0);\r\n\t\r\n\tconst navigate = useNavigate()\r\n\r\n\t\r\n\r\n\tconst checkIfWalletIsConnected = async () => {\r\n\t\ttry {\r\n\t\t\tconst { solana } = window;\r\n\t\t\tconst connection = new Connection(clusterApiUrl('devnet'),'confirmed',);\r\n\r\n\t\t\tif (solana) {\r\n\t\t\t\tif (solana.isPhantom) {\r\n\t\t\t\t\tconsole.log('Phantom wallet found!');\r\n\t\t\t\t\tconst response = await solana.connect({ onlyIfTrusted: true });\r\n\t\t\t\t\tsetPublicKey(response.publicKey);\r\n\t\t\t\t\t//console.log('Connected with Public Key:',publickey.walletID);\r\n\t\t\t\t\tsetWalletAddress(publickey.walletID);\r\n\t\t\t\t\t//const airdropSignature = await connection.requestAirdrop(response.publicKey,LAMPORTS_PER_SOL,);\r\n\t\t\t\t\t//await connection.confirmTransaction(airdropSignature);\r\n\r\n\t\t\t\t\tgetAccountData(response);\r\n\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\talert('Solana object not found! Get a Phantom Wallet');\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(error);\r\n\t\t\t}\r\n\t\t};\r\n\tconst getAccountData = async (response: PublicKey) => {\r\n\t\t\r\n\t\tconst publickey = {walletID: response.publicKey.toString()}\r\n\t\tconst account = await connection.getAccountInfo(response.publicKey);\r\n\t\t\r\n\t\tsetWalletAddress(publickey.walletID);\r\n\t\tsetConnected(true);\r\n\t\tapiCall(\"post\", `/api/auth/signin`, publickey).then(({token, ...user}) => {\r\n\t\t\tsetUsername(user.username);\r\n\t\t\tconsole.log(\"User found:\",user.username);\r\n\t\t}).catch(err => {\r\n\t\t\tconsole.log(\"User not registered\");\r\n\t\t\tnavigate(\"/register\");\r\n\t\t});\r\n\r\n\t\t//Find wallet balance and convert to USD\r\n\t\tsetBalance(account.lamports);\r\n\t\tconst CoinGecko = new Coingecko();\r\n\t\tconst solrate = CoinGecko.getRate(\"sol\",\"usd\").then(({result, ...rate}) => {\r\n\t\t\tvar Rate = Object.values(rate)[0].rate;\r\n\t\t\tsetBalanceUSD(((account.lamports/LAMPORTS_PER_SOL)*Rate).toFixed(2));\r\n\t\t\t}).catch( err => console.log(err));\r\n\t}\r\n\r\n\tconst connectWallet = async () => {\r\n\t\r\n\t\tconst { solana } = window;\r\n\t\tif (solana) {\r\n\t\t\tconst response = await solana.connect();\r\n\t\t\tsetPublicKey(response.publicKey);\r\n\t\t\tconst publickey = {walletID: response.publicKey.toString()}\r\n\t\t\tconsole.log('Connected with Public Key:',publickey.walletID);\r\n\t\t\tsetWalletAddress(publickey.walletID);\r\n\r\n\t\t\tsetConnected(true);\r\n\t\t\tapiCall(\"post\", `/api/auth/signin`, publickey).then(({token, ...user}) => {\r\n\t\t\t\tsetUsername(user.username);\r\n\t\t\t\tconsole.log(\"User found:\",username);\r\n\t\t\t}).catch(err => {\r\n\t\t\t\tconsole.log(\"User not registered\");\r\n\t\t\t\tnavigate(\"/register\");\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tgetAccountData(response);\r\n\t\t}\r\n\t};\r\n\tconst sendSol = async () => {\r\n\t\tlet fromKeypair = Keypair.generate();\r\n\t\tlet toKeypair = Keypair.generate();\r\n\t\tlet transaction = new Transaction();\r\n\r\n\t\ttransaction.add(\r\n\t\t  SystemProgram.transfer({\r\n\t\t\tfromPubkey: fromKeypair.publicKey,\r\n\t\t\ttoPubkey: toKeypair.publicKey,\r\n\t\t\tlamports: LAMPORTS_PER_SOL\r\n\t\t  })\r\n\t\t);\r\n\t\tsendAndConfirmTransaction(\r\n\t\t  connection,\r\n\t\t  transaction,\r\n\t\t  [walletAddress]\r\n\t\t);\r\n\t}\r\n\tfunction logout(){\r\n\t\tsetWalletAddress(null);\r\n\t\tsetPublicKey(null);\r\n\t\tsetConnected(false);\r\n\t\twindow.solana.request({ method: \"disconnect\" });\r\n\t\twindow.solana.on('disconnect', () => console.log(\"disconnected!\"));\r\n\t}\r\n\tconst renderNotConnectedContainer = () => (\r\n\t\t<div>\r\n\t\t\t<button class=\"connectbtn fullwidth\" onClick={connectWallet}>CONNECT</button>\r\n\t\t\t<div>Connect to Phantom Wallet to log in your account.</div>\r\n\t\t</div>\r\n\t );\r\n\t const renderConnectedUser = () => (\r\n\t     <div>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#\" className=\"userName\"><div className=\"userDP\"></div>{username}</a>\r\n\t\t\t\t\t<ul className=\"dropdown\">\r\n\t\t\t\t\t\t{!username && <li className=\"settingsli\" onClick={connectWallet}><a href=\"#\">Register Account</a></li>}\r\n\t\t\t\t\t\t<li className=\"settingsli\" onClick={connectWallet}><a href=\"#\">Change Username</a></li>\r\n\t\t\t\t\t\t<li className=\"settingsli\"><a href=\"#\">Account Settings</a></li>\r\n\t\t\t\t\t\t<li className=\"settingsli\" onClick={sendSol}><a href=\"#\">Send SOL</a></li>\r\n\t\t\t\t\t\t<li className=\"settingsli\" onClick={logout}><a href=\"#logout\">Logout</a></li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t<div className=\"userCurrency\">\r\n\t\t\t\t{balanceUSD} USD\t<br/>\r\n\t\t\t\t{Number(balance/LAMPORTS_PER_SOL).toFixed(4)} SOL\r\n\t\t\t</div>\r\n\t\t\t<div className=\"userSocial\">\r\n\t\t\t\tSocials\r\n\t\t\t</div>\r\n\t\t\t\t<ul className=\"friendlist\">\r\n\t\t\t\t\t<li className=\"friendName\">\r\n\t\t\t\t\t\t<div className=\"friendDP\"></div> ExampleFriend01\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"friendName\">\r\n\t\t\t\t\t\t<div className=\"friendDP\"></div> ExampleFriend02\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"friendName\">\r\n\t\t\t\t\t\t<div className=\"friendDP\"></div> ExampleFriend03\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"friendName\">\r\n\t\t\t\t\t\t<div className=\"friendDP\"></div> ExampleFriend04\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t </div>\r\n\t );\r\n\r\n\tuseEffect(() => {\r\n\t\t/*if (!provider) return;\r\n\r\n\t\tprovider.on(\"accountChanged\", (publicKey: PublicKey | null) => {\r\n\t\t  setPublicKey(publicKey);\r\n\t\t  if (publicKey) {\r\n\t\t\tconsole.log(\"[accountChanged] Switched account to \" + publicKey?.toBase58());\r\n\t\t  } else {\r\n\t\t\tconsole.log(\"[accountChanged] Switched unknown account\");\r\n\t\t\tprovider\r\n\t\t\t  .connect()\r\n\t\t\t  .then(() => console.log(\"[accountChanged] Reconnected successfully\"))\r\n\t\t\t  .catch((err) => {\r\n\t\t\t\tconsole.log(\"[accountChanged] Failed to re-connect: \" + err.message);\r\n\t\t\t  });\r\n\t\t  }\r\n\t\t});*/\r\n\r\n\t\tconst onLoad = async () => {\r\n\t\t\t  await checkIfWalletIsConnected();\r\n\t\t};\r\n\t\twindow.addEventListener('load', onLoad);\r\n\t\treturn () => window.removeEventListener('load', onLoad);\r\n\t\t}, []);\r\n\r\n\t\treturn (\r\n\t\t<Provider store={store}>\r\n\t\t\t<div className=\"background\">\r\n\t\t\t\t<div className=\"fadetop\">\r\n\t\t\t\t\t<div className = \"App\">\r\n\t\t\t\t\t\t<Navbar/>\r\n\t\t\t\t\t\t<SwitchRoute walletID={walletAddress} username={username}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"sideBar\">\r\n\t\t\t\t\t{walletAddress && renderConnectedUser()}\r\n\t\t\t\t\t{!walletAddress && renderNotConnectedContainer()}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</Provider>\r\n\t\t);\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}