{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApproveUseAuthority = exports.ApproveUseAuthorityArgs = void 0;\n\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\n\nconst spl_token_1 = require(\"@solana/spl-token\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst MetadataProgram_1 = require(\"../MetadataProgram\");\n\nclass ApproveUseAuthorityArgs extends mpl_core_1.Borsh.Data {\n  constructor() {\n    super(...arguments);\n    this.instruction = 20;\n  }\n\n}\n\nexports.ApproveUseAuthorityArgs = ApproveUseAuthorityArgs;\nApproveUseAuthorityArgs.SCHEMA = new Map([...ApproveUseAuthorityArgs.struct([['instruction', 'u8'], ['numberOfUses', 'u8']])]);\n\nclass ApproveUseAuthority extends mpl_core_1.Transaction {\n  constructor(options, params) {\n    super(options);\n    const {\n      feePayer\n    } = options;\n    const {\n      useAuthorityRecord,\n      user,\n      owner,\n      ownerTokenAccount,\n      metadata,\n      mint,\n      burner,\n      numberOfUses\n    } = params;\n    const data = ApproveUseAuthorityArgs.serialize({\n      numberOfUses\n    });\n    const accounts = [{\n      pubkey: useAuthorityRecord,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: owner,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: feePayer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: user,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: ownerTokenAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: metadata,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: mint,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: burner,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: web3_js_1.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    this.add(new web3_js_1.TransactionInstruction({\n      keys: accounts,\n      programId: MetadataProgram_1.MetadataProgram.PUBKEY,\n      data\n    }));\n  }\n\n}\n\nexports.ApproveUseAuthority = ApproveUseAuthority;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAOA;;AAEA,MAAaA,uBAAb,SAA6CC,iBAAMC,IAAnD,CAAuD;AAAvDC;;AAOE,uBAAc,EAAd;AAED;;AATsD;;AAAvDC;AACkBJ,iCAAS,IAAIK,GAAJ,CAAQ,CAC/B,GAAGL,uBAAuB,CAACM,MAAxB,CAA+B,CAChC,CAAC,aAAD,EAAgB,IAAhB,CADgC,EAEhC,CAAC,cAAD,EAAiB,IAAjB,CAFgC,CAA/B,CAD4B,CAAR,CAAT;;AAqBlB,MAAaC,mBAAb,SAAyCN,sBAAzC,CAAoD;AAClDE,cAAYK,OAAZ,EAA4CC,MAA5C,EAA6E;AAC3E,UAAMD,OAAN;AACA,UAAM;AAAEE;AAAF,QAAeF,OAArB;AACA,UAAM;AACJG,wBADI;AAEJC,UAFI;AAGJC,WAHI;AAIJC,uBAJI;AAKJC,cALI;AAMJC,UANI;AAOJC,YAPI;AAQJC;AARI,QASFT,MATJ;AAWA,UAAMU,IAAI,GAAGnB,uBAAuB,CAACoB,SAAxB,CAAkC;AAAEF;AAAF,KAAlC,CAAb;AACA,UAAMG,QAAQ,GAAG,CACf;AACEC,YAAM,EAAEX,kBADV;AAEEY,cAAQ,EAAE,KAFZ;AAGEC,gBAAU,EAAE;AAHd,KADe,EAMf;AACEF,YAAM,EAAET,KADV;AAEEU,cAAQ,EAAE,IAFZ;AAGEC,gBAAU,EAAE;AAHd,KANe,EAWf;AACEF,YAAM,EAAEZ,QADV;AAEEa,cAAQ,EAAE,IAFZ;AAGEC,gBAAU,EAAE;AAHd,KAXe,EAgBf;AACEF,YAAM,EAAEV,IADV;AAEEW,cAAQ,EAAE,KAFZ;AAGEC,gBAAU,EAAE;AAHd,KAhBe,EAqBf;AACEF,YAAM,EAAER,iBADV;AAEES,cAAQ,EAAE,KAFZ;AAGEC,gBAAU,EAAE;AAHd,KArBe,EA0Bf;AACEF,YAAM,EAAEP,QADV;AAEEQ,cAAQ,EAAE,KAFZ;AAGEC,gBAAU,EAAE;AAHd,KA1Be,EA+Bf;AACEF,YAAM,EAAEN,IADV;AAEEO,cAAQ,EAAE,KAFZ;AAGEC,gBAAU,EAAE;AAHd,KA/Be,EAoCf;AACEF,YAAM,EAAEL,MADV;AAEEM,cAAQ,EAAE,KAFZ;AAGEC,gBAAU,EAAE;AAHd,KApCe,EAyCf;AACEF,YAAM,EAAEG,4BADV;AAEEF,cAAQ,EAAE,KAFZ;AAGEC,gBAAU,EAAE;AAHd,KAzCe,EA8Cf;AACEF,YAAM,EAAEI,wBAAcC,SADxB;AAEEJ,cAAQ,EAAE,KAFZ;AAGEC,gBAAU,EAAE;AAHd,KA9Ce,EAmDf;AACEF,YAAM,EAAEI,4BADV;AAEEH,cAAQ,EAAE,KAFZ;AAGEC,gBAAU,EAAE;AAHd,KAnDe,CAAjB;AA0DA,SAAKI,GAAL,CACE,IAAIF,gCAAJ,CAA2B;AACzBG,UAAI,EAAER,QADmB;AAEzBM,eAAS,EAAEG,kCAAgBC,MAFF;AAGzBZ;AAHyB,KAA3B,CADF;AAOD;;AAjFiD;;AAApDf","names":["ApproveUseAuthorityArgs","mpl_core_1","Data","constructor","exports","Map","struct","ApproveUseAuthority","options","params","feePayer","useAuthorityRecord","user","owner","ownerTokenAccount","metadata","mint","burner","numberOfUses","data","serialize","accounts","pubkey","isSigner","isWritable","spl_token_1","web3_js_1","programId","add","keys","MetadataProgram_1","PUBKEY"],"sources":["../../../src/transactions/ApproveUseAuthority.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}