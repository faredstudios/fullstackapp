{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar _a;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StoreConfig = exports.StoreConfigData = void 0;\n\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst buffer_1 = require(\"buffer\");\n\nconst MetaplexProgram_1 = require(\"../MetaplexProgram\");\n\nclass StoreConfigData extends mpl_core_1.Borsh.Data {\n  constructor(args) {\n    super(args);\n    this.key = MetaplexProgram_1.MetaplexKey.StoreConfigV1;\n    this.key = MetaplexProgram_1.MetaplexKey.StoreConfigV1;\n  }\n\n}\n\nexports.StoreConfigData = StoreConfigData;\n_a = StoreConfigData;\nStoreConfigData.SCHEMA = _a.struct([['key', 'u8'], ['settingsUri', {\n  kind: 'option',\n  type: 'string'\n}]]);\n\nclass StoreConfig extends mpl_core_1.Account {\n  constructor(pubkey, info) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(MetaplexProgram_1.MetaplexProgram.PUBKEY)) {\n      throw (0, mpl_core_1.ERROR_INVALID_OWNER)();\n    }\n\n    if (!StoreConfig.isCompatible(this.info.data)) {\n      throw (0, mpl_core_1.ERROR_INVALID_ACCOUNT_DATA)();\n    }\n\n    this.data = StoreConfigData.deserialize(this.info.data);\n  }\n\n  static isCompatible(data) {\n    return data[0] === MetaplexProgram_1.MetaplexKey.StoreConfigV1;\n  }\n\n  static getPDA(store) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return MetaplexProgram_1.MetaplexProgram.findProgramAddress([buffer_1.Buffer.from(MetaplexProgram_1.MetaplexProgram.PREFIX), MetaplexProgram_1.MetaplexProgram.PUBKEY.toBuffer(), buffer_1.Buffer.from(MetaplexProgram_1.MetaplexProgram.CONFIG), new web3_js_1.PublicKey(store).toBuffer()]);\n    });\n  }\n\n}\n\nexports.StoreConfig = StoreConfig;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAOA;;AACA;;AACA;;AAKA,MAAaA,eAAb,SAAqCC,iBAAMC,IAA3C,CAAqD;AASnDC,cAAYC,IAAZ,EAAsB;AACpB,UAAMA,IAAN;AAJF,eAAmBC,8BAAYC,aAA/B;AAKE,SAAKC,GAAL,GAAWF,8BAAYC,aAAvB;AACD;;AAZkD;;AAArDE;;AACkBR,yBAASS,EAAI,CAACC,MAAL,CAAY,CACnC,CAAC,KAAD,EAAQ,IAAR,CADmC,EAEnC,CAAC,aAAD,EAAgB;AAAEC,MAAI,EAAE,QAAR;AAAkBC,MAAI,EAAE;AAAxB,CAAhB,CAFmC,CAAZ,CAAT;;AAclB,MAAaC,WAAb,SAAiCZ,kBAAjC,CAAyD;AACvDE,cAAYW,MAAZ,EAAkCC,IAAlC,EAA2D;AACzD,UAAMD,MAAN,EAAcC,IAAd;;AAEA,QAAI,CAAC,KAAKC,WAAL,CAAiBX,kCAAgBY,MAAjC,CAAL,EAA+C;AAC7C,YAAM,qCAAN;AACD;;AAED,QAAI,CAACJ,WAAW,CAACK,YAAZ,CAAyB,KAAKH,IAAL,CAAUI,IAAnC,CAAL,EAA+C;AAC7C,YAAM,4CAAN;AACD;;AAED,SAAKA,IAAL,GAAYnB,eAAe,CAACoB,WAAhB,CAA4B,KAAKL,IAAL,CAAUI,IAAtC,CAAZ;AACD;;AAEkB,SAAZD,YAAY,CAACC,IAAD,EAAa;AAC9B,WAAOA,IAAI,CAAC,CAAD,CAAJ,KAAYd,8BAAYC,aAA/B;AACD;;AAEkB,SAANe,MAAM,CAACC,KAAD,EAAoB;;AACrC,aAAOjB,kCAAgBkB,kBAAhB,CAAmC,CACxCC,gBAAOC,IAAP,CAAYpB,kCAAgBqB,MAA5B,CADwC,EAExCrB,kCAAgBY,MAAhB,CAAuBU,QAAvB,EAFwC,EAGxCH,gBAAOC,IAAP,CAAYpB,kCAAgBuB,MAA5B,CAHwC,EAIxC,IAAIC,mBAAJ,CAAcP,KAAd,EAAqBK,QAArB,EAJwC,CAAnC,CAAP;AAMD;AAAA;;AA1BsD;;AAAzDnB","names":["StoreConfigData","mpl_core_1","Data","constructor","args","MetaplexProgram_1","StoreConfigV1","key","exports","_a","struct","kind","type","StoreConfig","pubkey","info","assertOwner","PUBKEY","isCompatible","data","deserialize","getPDA","store","findProgramAddress","buffer_1","from","PREFIX","toBuffer","CONFIG","web3_js_1"],"sources":["../../../src/accounts/StoreConfig.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}