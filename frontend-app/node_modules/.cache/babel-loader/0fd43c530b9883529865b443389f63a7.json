{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MSI\\\\Documents\\\\CG\\\\fullstackapp\\\\frontend-app\\\\src\\\\containers\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport { Routes, Route, useNavigate } from 'react-router-dom';\nimport '../components/styles/App.css';\nimport { Provider } from \"react-redux\";\nimport { configureStore } from '../store';\nimport SwitchRoute from './SwitchRoute';\nimport background from '../components/images/daytoner2.jpg';\nimport Navbar from './Navbar';\nimport { authUser } from \"../store/actions/auth\";\nimport { apiCall } from \"../services/api\";\nimport { Connection, PublicKey, Transaction, clusterApiUrl, SystemProgram, Keypair, LAMPORTS_PER_SOL, sendAndConfirmTransaction } from \"@solana/web3.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getProvider = () => {\n  if (\"solana\" in window) {\n    const anyWindow = window;\n    const provider = anyWindow.solana;\n\n    if (provider.isPhantom) {\n      return provider;\n    }\n  }\n\n  window.open(\"https://phantom.app/\", \"_blank\");\n};\n\nconst NETWORK = clusterApiUrl(\"devnet\");\nconst isPhantomInstalled = window.solana && window.solana.isPhantom;\nconst store = configureStore();\n\nconst App = () => {\n  _s();\n\n  const connection = new Connection(NETWORK);\n  const [connected, setConnected] = useState(false);\n  const [publicKey, setPublicKey] = useState({\n    publicKey: null\n  });\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [username, setUsername] = useState(null);\n  const [balance, setBalance] = useState(0);\n  const navigate = useNavigate();\n  const provider = getProvider();\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n      const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n      if (solana) {\n        if (solana.isPhantom) {\n          provider.on(\"connect\", publicKey => {\n            setPublicKey(publicKey);\n            setConnected(true);\n            const publickey = publicKey === null || publicKey === void 0 ? void 0 : publicKey.toBase58();\n            console.log(\"[connect] \" + publickey);\n            setWalletAddress(publickey);\n          }); //const airdropSignature = await connection.requestAirdrop(response.publicKey,LAMPORTS_PER_SOL,);\n          //await connection.confirmTransaction(airdropSignature);\n\n          const account = await connection.getAccountInfo(publicKey);\n          setBalance(account.lamports);\n          apiCall(\"post\", `/api/auth/signin`, userData).then(_ref => {\n            let {\n              token,\n              ...user\n            } = _ref;\n            setUsername(user.username);\n            console.log(\"User found:\", username);\n          }).catch(err => {\n            console.log(\"User not registered\");\n            navigate(\"/register\");\n          });\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      const userData = {\n        walletID: response.publicKey.toString()\n      };\n      console.log('Connected with Public Key:', userData.walletID);\n      setWalletAddress(userData.walletID);\n      const account = await connection.getAccountInfo(response.publicKey);\n      setBalance(account.lamports);\n      apiCall(\"post\", `/api/auth/signin`, userData).then(_ref2 => {\n        let {\n          token,\n          ...user\n        } = _ref2;\n        setUsername(user.username);\n        console.log(\"User found:\", username);\n      }).catch(err => {\n        console.log(\"User not registered\");\n        navigate(\"/register\");\n      });\n    }\n  };\n\n  const sendSol = async () => {\n    let fromKeypair = Keypair.generate();\n    let toKeypair = Keypair.generate();\n    let transaction = new Transaction();\n    transaction.add(SystemProgram.transfer({\n      fromPubkey: fromKeypair.publicKey,\n      toPubkey: toKeypair.publicKey,\n      lamports: LAMPORTS_PER_SOL\n    }));\n    sendAndConfirmTransaction(connection, transaction, [walletAddress]);\n  };\n\n  function logout() {\n    setWalletAddress(null);\n    window.solana.request({\n      method: \"disconnect\"\n    });\n    window.solana.on('disconnect', () => console.log(\"disconnected!\"));\n  }\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      class: \"connectbtn fullwidth\",\n      onClick: connectWallet,\n      children: \"CONNECT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Connect to Phantom Wallet to log in your account.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 3\n  }, this);\n\n  const renderConnectedUser = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          className: \"userName\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"userDP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 39\n          }, this), username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"dropdown\",\n          children: [!username && /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"settingsli\",\n            onClick: connectWallet,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#\",\n              children: \"Register Account\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 72\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"settingsli\",\n            onClick: connectWallet,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#\",\n              children: \"Change Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 58\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"settingsli\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#\",\n              children: \"Account Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 34\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"settingsli\",\n            onClick: sendSol,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#\",\n              children: \"Send SOL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 52\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"settingsli\",\n            onClick: logout,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#logout\",\n              children: \"Logout\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 51\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"userCurrency\",\n      children: [Number(balance / LAMPORTS_PER_SOL).toFixed(4), \" SOL\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"userSocial\",\n      children: \"Socials\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"friendlist\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"friendName\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"friendDP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 7\n        }, this), \" ExampleFriend01\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"friendName\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"friendDP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 7\n        }, this), \" ExampleFriend02\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"friendName\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"friendDP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 7\n        }, this), \" ExampleFriend03\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"friendName\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"friendDP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 7\n        }, this), \" ExampleFriend04\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 7\n  }, this);\n\n  useEffect(() => {\n    /*if (!provider) return;\r\n    provider.connect({ onlyIfTrusted: true }).catch((err) => {});\r\n    \r\n    provider.on(\"connect\", (publicKey: PublicKey) => {\r\n      setPublicKey(publicKey);\r\n      setConnected(true);\r\n      console.log(\"[connect] \" + publicKey?.toBase58());\r\n    });\r\n    provider.on(\"disconnect\", () => {\r\n      setPublicKey(null);\r\n      setConnected(false);\r\n      console.log(\"[disconnect]\");\r\n    });\r\n    provider.on(\"accountChanged\", (publicKey: PublicKey | null) => {\r\n      setPublicKey(publicKey);\r\n      if (publicKey) {\r\n    \tconsole.log(\"[accountChanged] Switched account to \" + publicKey?.toBase58());\r\n      } else {\r\n    \tconsole.log(\"[accountChanged] Switched unknown account\");\r\n    \tprovider\r\n    \t  .connect()\r\n    \t  .then(() => console.log(\"[accountChanged] Reconnected successfully\"))\r\n    \t  .catch((err) => {\r\n    \t\tconsole.log(\"[accountChanged] Failed to re-connect: \" + err.message);\r\n    \t  });\r\n      }\r\n    });*/\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    store: store,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fadetop\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\",\n          children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(SwitchRoute, {\n            walletID: walletAddress,\n            username: username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sideBar\",\n        children: [walletAddress && renderConnectedUser(), !walletAddress && renderNotConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"G/Pn4IulpRVOheEm1H+UR3U2M/U=\", false, function () {\n  return [useNavigate];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/MSI/Documents/CG/fullstackapp/frontend-app/src/containers/App.js"],"names":["React","Component","useEffect","useState","Routes","Route","useNavigate","Provider","configureStore","SwitchRoute","background","Navbar","authUser","apiCall","Connection","PublicKey","Transaction","clusterApiUrl","SystemProgram","Keypair","LAMPORTS_PER_SOL","sendAndConfirmTransaction","getProvider","window","anyWindow","provider","solana","isPhantom","open","NETWORK","isPhantomInstalled","store","App","connection","connected","setConnected","publicKey","setPublicKey","walletAddress","setWalletAddress","username","setUsername","balance","setBalance","navigate","checkIfWalletIsConnected","on","publickey","toBase58","console","log","account","getAccountInfo","lamports","userData","then","token","user","catch","err","alert","error","connectWallet","response","connect","walletID","toString","sendSol","fromKeypair","generate","toKeypair","transaction","add","transfer","fromPubkey","toPubkey","logout","request","method","renderNotConnectedContainer","renderConnectedUser","Number","toFixed","onLoad","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import React, {Component, useEffect, useState} from 'react';\r\nimport {Routes, Route, useNavigate} from 'react-router-dom';\r\nimport '../components/styles/App.css';\r\nimport { Provider } from \"react-redux\";\r\nimport { configureStore } from '../store';\r\nimport SwitchRoute from './SwitchRoute';\r\nimport background from '../components/images/daytoner2.jpg';\r\nimport Navbar from './Navbar';\r\nimport { authUser } from \"../store/actions/auth\";\r\nimport { apiCall } from \"../services/api\";\r\nimport {\r\n  Connection,\r\n  PublicKey,\r\n  Transaction,\r\n  clusterApiUrl,\r\n  SystemProgram,\r\n  Keypair,\r\n  LAMPORTS_PER_SOL,\r\n  sendAndConfirmTransaction\r\n} from \"@solana/web3.js\";\r\n\r\ntype PhantomEvent = \"disconnect\" | \"connect\" | \"accountChanged\";\r\ninterface ConnectOpts {\r\n  onlyIfTrusted: boolean;\r\n}\r\ninterface PhantomProvider {\r\n  publicKey: PublicKey | null;\r\n  isConnected: boolean | null;\r\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\r\n  signAllTransactions: (transactions: Transaction[]) => Promise<Transaction[]>;\r\n  signMessage: (\r\n    message: Uint8Array | string,\r\n    display?: DisplayEncoding\r\n  ) => Promise<any>;\r\n  connect: (opts?: Partial<ConnectOpts>) => Promise<{ publicKey: PublicKey }>;\r\n  disconnect: () => Promise<void>;\r\n  on: (event: PhantomEvent, handler: (args: any) => void) => void;\r\n  request: (method: PhantomRequestMethod, params: any) => Promise<unknown>;\r\n}\r\nconst getProvider = (): PhantomProvider | undefined => {\r\n  if (\"solana\" in window) {\r\n    const anyWindow: any = window;\r\n    const provider = anyWindow.solana;\r\n    if (provider.isPhantom) {\r\n      return provider;\r\n    }\r\n  }\r\n  window.open(\"https://phantom.app/\", \"_blank\");\r\n};\r\nconst NETWORK = clusterApiUrl(\"devnet\");\r\nconst isPhantomInstalled = window.solana && window.solana.isPhantom\r\nconst store = configureStore()\r\n\r\n\r\nconst App = () => {\r\n\tconst connection = new Connection(NETWORK);\r\n\tconst [connected, setConnected] = useState(false);\r\n\tconst [publicKey, setPublicKey] = useState({publicKey:null});\r\n\r\n\tconst [walletAddress, setWalletAddress] = useState(null);\r\n\tconst [username, setUsername] = useState(null);\r\n\tconst [balance, setBalance] = useState(0);\r\n\t\r\n\tconst navigate = useNavigate()\r\n\tconst provider = getProvider();\r\n\t\r\n\r\n\tconst checkIfWalletIsConnected = async () => {\r\n\t\ttry {\r\n\t\t\tconst { solana } = window;\r\n\t\t\tconst connection = new Connection(clusterApiUrl('devnet'),'confirmed',);\r\n\r\n\t\t\tif (solana) {\r\n\t\t\t\tif (solana.isPhantom) {\r\n\t\t\t\t\tprovider.on(\"connect\", (publicKey: PublicKey) => {\r\n\t\t\t\t\t  setPublicKey(publicKey);\r\n\t\t\t\t\t  setConnected(true);\r\n\t\t\t\t\t  const publickey = publicKey?.toBase58();\r\n\t\t\t\t\t  console.log(\"[connect] \" + publickey);\r\n\t\t\t\t\tsetWalletAddress(publickey);\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//const airdropSignature = await connection.requestAirdrop(response.publicKey,LAMPORTS_PER_SOL,);\r\n\t\t\t\t\t//await connection.confirmTransaction(airdropSignature);\r\n\t\t\t\t\tconst account = await connection.getAccountInfo(publicKey);\r\n\t\t\t\t\tsetBalance(account.lamports);\r\n\r\n\t\t\t\t\tapiCall(\"post\", `/api/auth/signin`, userData).then(({token, ...user}) => {\r\n\t\t\t\t\t\tsetUsername(user.username);\r\n\t\t\t\t\t\tconsole.log(\"User found:\",username);\r\n\t\t\t\t\t}).catch(err => {\r\n\t\t\t\t\t\tconsole.log(\"User not registered\");\r\n\t\t\t\t\t\tnavigate(\"/register\");\r\n\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\talert('Solana object not found! Get a Phantom Wallet');\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(error);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\tconst connectWallet = async () => {\r\n\t\r\n\t\tconst { solana } = window;\r\n\t\tif (solana) {\r\n\t\t\tconst response = await solana.connect();\r\n\t\t\tconst userData = {walletID: response.publicKey.toString()}\r\n\t\t\tconsole.log('Connected with Public Key:', userData.walletID);\r\n\t\t\tsetWalletAddress(userData.walletID);\r\n\t\t\tconst account = await connection.getAccountInfo(response.publicKey);\r\n\t\t\tsetBalance(account.lamports);\r\n\t\t\tapiCall(\"post\", `/api/auth/signin`, userData).then(({token, ...user}) => {\r\n\t\t\t\tsetUsername(user.username);\r\n\t\t\t\tconsole.log(\"User found:\",username);\r\n\t\t\t}).catch(err => {\r\n\t\t\t\tconsole.log(\"User not registered\");\r\n\t\t\t\tnavigate(\"/register\");\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\tconst sendSol = async () => {\r\n\t\tlet fromKeypair = Keypair.generate();\r\n\t\tlet toKeypair = Keypair.generate();\r\n\t\tlet transaction = new Transaction();\r\n\r\n\t\ttransaction.add(\r\n\t\t  SystemProgram.transfer({\r\n\t\t\tfromPubkey: fromKeypair.publicKey,\r\n\t\t\ttoPubkey: toKeypair.publicKey,\r\n\t\t\tlamports: LAMPORTS_PER_SOL\r\n\t\t  })\r\n\t\t);\r\n\t\tsendAndConfirmTransaction(\r\n\t\t  connection,\r\n\t\t  transaction,\r\n\t\t  [walletAddress]\r\n\t\t);\r\n\t}\r\n\tfunction logout(){\r\n\t\tsetWalletAddress(null);\r\n\t\twindow.solana.request({ method: \"disconnect\" });\r\n\t\twindow.solana.on('disconnect', () => console.log(\"disconnected!\"));\r\n\t}\r\n\tconst renderNotConnectedContainer = () => (\r\n\t\t<div>\r\n\t\t\t<button class=\"connectbtn fullwidth\" onClick={connectWallet}>CONNECT</button>\r\n\t\t\t<div>Connect to Phantom Wallet to log in your account.</div>\r\n\t\t</div>\r\n\t );\r\n\t const renderConnectedUser = () => (\r\n\t     <div>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#\" className=\"userName\"><div className=\"userDP\"></div>{username}</a>\r\n\t\t\t\t\t<ul className=\"dropdown\">\r\n\t\t\t\t\t\t{!username && <li className=\"settingsli\" onClick={connectWallet}><a href=\"#\">Register Account</a></li>}\r\n\t\t\t\t\t\t<li className=\"settingsli\" onClick={connectWallet}><a href=\"#\">Change Username</a></li>\r\n\t\t\t\t\t\t<li className=\"settingsli\"><a href=\"#\">Account Settings</a></li>\r\n\t\t\t\t\t\t<li className=\"settingsli\" onClick={sendSol}><a href=\"#\">Send SOL</a></li>\r\n\t\t\t\t\t\t<li className=\"settingsli\" onClick={logout}><a href=\"#logout\">Logout</a></li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t<div className=\"userCurrency\">\r\n\t\t\t\t{Number(balance/LAMPORTS_PER_SOL).toFixed(4)} SOL\r\n\t\t\t</div>\r\n\t\t\t<div className=\"userSocial\">\r\n\t\t\t\tSocials\r\n\t\t\t</div>\r\n\t\t\t\t<ul className=\"friendlist\">\r\n\t\t\t\t\t<li className=\"friendName\">\r\n\t\t\t\t\t\t<div className=\"friendDP\"></div> ExampleFriend01\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"friendName\">\r\n\t\t\t\t\t\t<div className=\"friendDP\"></div> ExampleFriend02\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"friendName\">\r\n\t\t\t\t\t\t<div className=\"friendDP\"></div> ExampleFriend03\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"friendName\">\r\n\t\t\t\t\t\t<div className=\"friendDP\"></div> ExampleFriend04\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t </div>\r\n\t );\r\n\r\n\tuseEffect(() => {\r\n\t\t/*if (!provider) return;\r\n\t\tprovider.connect({ onlyIfTrusted: true }).catch((err) => {});\r\n\t\t\r\n\t\tprovider.on(\"connect\", (publicKey: PublicKey) => {\r\n\t\t  setPublicKey(publicKey);\r\n\t\t  setConnected(true);\r\n\t\t  console.log(\"[connect] \" + publicKey?.toBase58());\r\n\t\t});\r\n\t\tprovider.on(\"disconnect\", () => {\r\n\t\t  setPublicKey(null);\r\n\t\t  setConnected(false);\r\n\t\t  console.log(\"[disconnect]\");\r\n\t\t});\r\n\t\tprovider.on(\"accountChanged\", (publicKey: PublicKey | null) => {\r\n\t\t  setPublicKey(publicKey);\r\n\t\t  if (publicKey) {\r\n\t\t\tconsole.log(\"[accountChanged] Switched account to \" + publicKey?.toBase58());\r\n\t\t  } else {\r\n\t\t\tconsole.log(\"[accountChanged] Switched unknown account\");\r\n\t\t\tprovider\r\n\t\t\t  .connect()\r\n\t\t\t  .then(() => console.log(\"[accountChanged] Reconnected successfully\"))\r\n\t\t\t  .catch((err) => {\r\n\t\t\t\tconsole.log(\"[accountChanged] Failed to re-connect: \" + err.message);\r\n\t\t\t  });\r\n\t\t  }\r\n\t\t});*/\r\n\r\n\t\tconst onLoad = async () => {\r\n\t\t\t  await checkIfWalletIsConnected();\r\n\t\t};\r\n\t\twindow.addEventListener('load', onLoad);\r\n\t\treturn () => window.removeEventListener('load', onLoad);\r\n\t\t}, []);\r\n\r\n\t\treturn (\r\n\t\t<Provider store={store}>\r\n\t\t\t<div className=\"background\">\r\n\t\t\t\t<div className=\"fadetop\">\r\n\t\t\t\t\t<div className = \"App\">\r\n\t\t\t\t\t\t<Navbar/>\r\n\t\t\t\t\t\t<SwitchRoute walletID={walletAddress} username={username}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"sideBar\">\r\n\t\t\t\t\t{walletAddress && renderConnectedUser()}\r\n\t\t\t\t\t{!walletAddress && renderNotConnectedContainer()}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</Provider>\r\n\t\t);\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}