{"ast":null,"code":"import nacl from 'tweetnacl';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { coerce, instance, string, tuple, literal, unknown, union, type, optional, any, number, array, nullable, create, boolean, record, assert as assert$7 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction getDefaultExportFromCjs(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar hash$1 = {};\nvar utils$9 = {};\nvar minimalisticAssert = assert$6;\n\nfunction assert$6(val, msg) {\n  if (!val) throw new Error(msg || 'Assertion failed');\n}\n\nassert$6.equal = function assertEqual(l, r, msg) {\n  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);\n};\n\nvar inherits_browser = {\n  exports: {}\n};\n\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n    }\n  };\n} else {\n  // old school shim for old browsers\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n\n      var TempCtor = function () {};\n\n      TempCtor.prototype = superCtor.prototype;\n      ctor.prototype = new TempCtor();\n      ctor.prototype.constructor = ctor;\n    }\n  };\n}\n\nvar assert$5 = minimalisticAssert;\nvar inherits = inherits_browser.exports;\nutils$9.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg)) return msg.slice();\n  if (!msg) return [];\n  var res = [];\n\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = c >> 6 | 192;\n          res[p++] = c & 63 | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = c >> 18 | 240;\n          res[p++] = c >> 12 & 63 | 128;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        } else {\n          res[p++] = c >> 12 | 224;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0) msg = '0' + msg;\n\n      for (i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++) res[i] = msg[i] | 0;\n  }\n\n  return res;\n}\n\nutils$9.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n\n  for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));\n\n  return res;\n}\n\nutils$9.toHex = toHex;\n\nfunction htonl(w) {\n  var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;\n  return res >>> 0;\n}\n\nutils$9.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little') w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n\n  return res;\n}\n\nutils$9.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1) return '0' + word;else return word;\n}\n\nutils$9.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;\n}\n\nutils$9.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert$5(len % 4 === 0);\n  var res = new Array(len / 4);\n\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n    res[i] = w >>> 0;\n  }\n\n  return res;\n}\n\nutils$9.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = m >>> 16 & 0xff;\n      res[k + 2] = m >>> 8 & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = m >>> 16 & 0xff;\n      res[k + 1] = m >>> 8 & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n\n  return res;\n}\n\nutils$9.split32 = split32;\n\nfunction rotr32$1(w, b) {\n  return w >>> b | w << 32 - b;\n}\n\nutils$9.rotr32 = rotr32$1;\n\nfunction rotl32$2(w, b) {\n  return w << b | w >>> 32 - b;\n}\n\nutils$9.rotl32 = rotl32$2;\n\nfunction sum32$3(a, b) {\n  return a + b >>> 0;\n}\n\nutils$9.sum32 = sum32$3;\n\nfunction sum32_3$1(a, b, c) {\n  return a + b + c >>> 0;\n}\n\nutils$9.sum32_3 = sum32_3$1;\n\nfunction sum32_4$2(a, b, c, d) {\n  return a + b + c + d >>> 0;\n}\n\nutils$9.sum32_4 = sum32_4$2;\n\nfunction sum32_5$2(a, b, c, d, e) {\n  return a + b + c + d + e >>> 0;\n}\n\nutils$9.sum32_5 = sum32_5$2;\n\nfunction sum64$1(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\n\nutils$9.sum64 = sum64$1;\n\nfunction sum64_hi$1(ah, al, bh, bl) {\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\n\nutils$9.sum64_hi = sum64_hi$1;\n\nfunction sum64_lo$1(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\n\nutils$9.sum64_lo = sum64_lo$1;\n\nfunction sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\n\nutils$9.sum64_4_hi = sum64_4_hi$1;\n\nfunction sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\n\nutils$9.sum64_4_lo = sum64_4_lo$1;\n\nfunction sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = lo + el >>> 0;\n  carry += lo < el ? 1 : 0;\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\n\nutils$9.sum64_5_hi = sum64_5_hi$1;\n\nfunction sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n  return lo >>> 0;\n}\n\nutils$9.sum64_5_lo = sum64_5_lo$1;\n\nfunction rotr64_hi$1(ah, al, num) {\n  var r = al << 32 - num | ah >>> num;\n  return r >>> 0;\n}\n\nutils$9.rotr64_hi = rotr64_hi$1;\n\nfunction rotr64_lo$1(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\n\nutils$9.rotr64_lo = rotr64_lo$1;\n\nfunction shr64_hi$1(ah, al, num) {\n  return ah >>> num;\n}\n\nutils$9.shr64_hi = shr64_hi$1;\n\nfunction shr64_lo$1(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\n\nutils$9.shr64_lo = shr64_lo$1;\nvar common$5 = {};\nvar utils$8 = utils$9;\nvar assert$4 = minimalisticAssert;\n\nfunction BlockHash$4() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\n\ncommon$5.BlockHash = BlockHash$4;\n\nBlockHash$4.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils$8.toArray(msg, enc);\n  if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length; // Enough data, try updating\n\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending; // Process pending data in blocks\n\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0) this.pending = null;\n    msg = utils$8.join32(msg, 0, msg.length - r, this.endian);\n\n    for (var i = 0; i < msg.length; i += this._delta32) this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash$4.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert$4(this.pending === null);\n  return this._digest(enc);\n};\n\nBlockHash$4.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - (len + this.padLength) % bytes;\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n\n  for (var i = 1; i < k; i++) res[i] = 0; // Append length\n\n\n  len <<= 3;\n\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++) res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++) res[i++] = 0;\n  }\n\n  return res;\n};\n\nvar sha = {};\nvar common$4 = {};\nvar utils$7 = utils$9;\nvar rotr32 = utils$7.rotr32;\n\nfunction ft_1$1(s, x, y, z) {\n  if (s === 0) return ch32$1(x, y, z);\n  if (s === 1 || s === 3) return p32(x, y, z);\n  if (s === 2) return maj32$1(x, y, z);\n}\n\ncommon$4.ft_1 = ft_1$1;\n\nfunction ch32$1(x, y, z) {\n  return x & y ^ ~x & z;\n}\n\ncommon$4.ch32 = ch32$1;\n\nfunction maj32$1(x, y, z) {\n  return x & y ^ x & z ^ y & z;\n}\n\ncommon$4.maj32 = maj32$1;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\n\ncommon$4.p32 = p32;\n\nfunction s0_256$1(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\n\ncommon$4.s0_256 = s0_256$1;\n\nfunction s1_256$1(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\n\ncommon$4.s1_256 = s1_256$1;\n\nfunction g0_256$1(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;\n}\n\ncommon$4.g0_256 = g0_256$1;\n\nfunction g1_256$1(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;\n}\n\ncommon$4.g1_256 = g1_256$1;\nvar utils$6 = utils$9;\nvar common$3 = common$5;\nvar shaCommon$1 = common$4;\nvar rotl32$1 = utils$6.rotl32;\nvar sum32$2 = utils$6.sum32;\nvar sum32_5$1 = utils$6.sum32_5;\nvar ft_1 = shaCommon$1.ft_1;\nvar BlockHash$3 = common$3.BlockHash;\nvar sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1)) return new SHA1();\n  BlockHash$3.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.W = new Array(80);\n}\n\nutils$6.inherits(SHA1, BlockHash$3);\nvar _1 = SHA1;\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n\n  for (; i < W.length; i++) W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32$1(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32$2(this.h[0], a);\n  this.h[1] = sum32$2(this.h[1], b);\n  this.h[2] = sum32$2(this.h[2], c);\n  this.h[3] = sum32$2(this.h[3], d);\n  this.h[4] = sum32$2(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$6.toHex32(this.h, 'big');else return utils$6.split32(this.h, 'big');\n};\n\nvar utils$5 = utils$9;\nvar common$2 = common$5;\nvar shaCommon = common$4;\nvar assert$3 = minimalisticAssert;\nvar sum32$1 = utils$5.sum32;\nvar sum32_4$1 = utils$5.sum32_4;\nvar sum32_5 = utils$5.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\nvar BlockHash$2 = common$2.BlockHash;\nvar sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\nfunction SHA256$1() {\n  if (!(this instanceof SHA256$1)) return new SHA256$1();\n  BlockHash$2.call(this);\n  this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\n\nutils$5.inherits(SHA256$1, BlockHash$2);\nvar _256 = SHA256$1;\nSHA256$1.blockSize = 512;\nSHA256$1.outSize = 256;\nSHA256$1.hmacStrength = 192;\nSHA256$1.padLength = 64;\n\nSHA256$1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n\n  for (; i < W.length; i++) W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n  assert$3(this.k.length === W.length);\n\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32$1(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32$1(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32$1(T1, T2);\n  }\n\n  this.h[0] = sum32$1(this.h[0], a);\n  this.h[1] = sum32$1(this.h[1], b);\n  this.h[2] = sum32$1(this.h[2], c);\n  this.h[3] = sum32$1(this.h[3], d);\n  this.h[4] = sum32$1(this.h[4], e);\n  this.h[5] = sum32$1(this.h[5], f);\n  this.h[6] = sum32$1(this.h[6], g);\n  this.h[7] = sum32$1(this.h[7], h);\n};\n\nSHA256$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$5.toHex32(this.h, 'big');else return utils$5.split32(this.h, 'big');\n};\n\nvar utils$4 = utils$9;\nvar SHA256 = _256;\n\nfunction SHA224() {\n  if (!(this instanceof SHA224)) return new SHA224();\n  SHA256.call(this);\n  this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];\n}\n\nutils$4.inherits(SHA224, SHA256);\nvar _224 = SHA224;\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex') return utils$4.toHex32(this.h.slice(0, 7), 'big');else return utils$4.split32(this.h.slice(0, 7), 'big');\n};\n\nvar utils$3 = utils$9;\nvar common$1 = common$5;\nvar assert$2 = minimalisticAssert;\nvar rotr64_hi = utils$3.rotr64_hi;\nvar rotr64_lo = utils$3.rotr64_lo;\nvar shr64_hi = utils$3.shr64_hi;\nvar shr64_lo = utils$3.shr64_lo;\nvar sum64 = utils$3.sum64;\nvar sum64_hi = utils$3.sum64_hi;\nvar sum64_lo = utils$3.sum64_lo;\nvar sum64_4_hi = utils$3.sum64_4_hi;\nvar sum64_4_lo = utils$3.sum64_4_lo;\nvar sum64_5_hi = utils$3.sum64_5_hi;\nvar sum64_5_lo = utils$3.sum64_5_lo;\nvar BlockHash$1 = common$1.BlockHash;\nvar sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];\n\nfunction SHA512$1() {\n  if (!(this instanceof SHA512$1)) return new SHA512$1();\n  BlockHash$1.call(this);\n  this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\n\nutils$3.inherits(SHA512$1, BlockHash$1);\nvar _512 = SHA512$1;\nSHA512$1.blockSize = 1024;\nSHA512$1.outSize = 512;\nSHA512$1.hmacStrength = 192;\nSHA512$1.padLength = 128;\n\nSHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W; // 32 x 32bit words\n\n  for (var i = 0; i < 32; i++) W[i] = msg[start + i];\n\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2\n\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14]; // i - 7\n\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15\n\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32]; // i - 16\n\n    var c3_lo = W[i - 31];\n    W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n  }\n};\n\nSHA512$1.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n  assert$2(this.k.length === W.length);\n\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n    var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n    hh = gh;\n    hl = gl;\n    gh = fh;\n    gl = fl;\n    fh = eh;\n    fl = el;\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n    dh = ch;\n    dl = cl;\n    ch = bh;\n    cl = bl;\n    bh = ah;\n    bl = al;\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$3.toHex32(this.h, 'big');else return utils$3.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = xh & yh ^ ~xh & zh;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = xl & yl ^ ~xl & zl;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = xh & yh ^ xh & zh ^ yh & zh;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = xl & yl ^ xl & zl ^ yl & zl;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2); // 34\n\n  var c2_hi = rotr64_hi(xl, xh, 7); // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2); // 34\n\n  var c2_lo = rotr64_lo(xl, xh, 7); // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9); // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9); // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29); // 61\n\n  var c2_hi = shr64_hi(xh, xl, 6);\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29); // 61\n\n  var c2_lo = shr64_lo(xh, xl, 6);\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nvar utils$2 = utils$9;\nvar SHA512 = _512;\n\nfunction SHA384() {\n  if (!(this instanceof SHA384)) return new SHA384();\n  SHA512.call(this);\n  this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];\n}\n\nutils$2.inherits(SHA384, SHA512);\nvar _384 = SHA384;\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$2.toHex32(this.h.slice(0, 12), 'big');else return utils$2.split32(this.h.slice(0, 12), 'big');\n};\n\nsha.sha1 = _1;\nsha.sha224 = _224;\nsha.sha256 = _256;\nsha.sha384 = _384;\nsha.sha512 = _512;\nvar ripemd = {};\nvar utils$1 = utils$9;\nvar common = common$5;\nvar rotl32 = utils$1.rotl32;\nvar sum32 = utils$1.sum32;\nvar sum32_3 = utils$1.sum32_3;\nvar sum32_4 = utils$1.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160)) return new RIPEMD160();\n  BlockHash.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.endian = 'little';\n}\n\nutils$1.inherits(RIPEMD160, BlockHash);\nripemd.ripemd160 = RIPEMD160;\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$1.toHex32(this.h, 'little');else return utils$1.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);\n}\n\nfunction K(j) {\n  if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;\n}\n\nvar r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\nvar rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\nvar s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\nvar sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];\nvar utils = utils$9;\nvar assert$1 = minimalisticAssert;\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\n\nvar hmac = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize) key = new this.Hash().update(key).digest();\n  assert$1(key.length <= this.blockSize); // Add padding to key\n\n  for (var i = key.length; i < this.blockSize; i++) key.push(0);\n\n  for (i = 0; i < key.length; i++) key[i] ^= 0x36;\n\n  this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a\n\n  for (i = 0; i < key.length; i++) key[i] ^= 0x6a;\n\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n\n(function (exports) {\n  var hash = exports;\n  hash.utils = utils$9;\n  hash.common = common$5;\n  hash.sha = sha;\n  hash.ripemd = ripemd;\n  hash.hmac = hmac; // Proxy hash functions to the main object\n\n  hash.sha1 = hash.sha.sha1;\n  hash.sha256 = hash.sha.sha256;\n  hash.sha224 = hash.sha.sha224;\n  hash.sha384 = hash.sha.sha384;\n  hash.sha512 = hash.sha.sha512;\n  hash.ripemd160 = hash.ripemd.ripemd160;\n})(hash$1);\n\nvar hash = hash$1;\nconst version$2 = \"logger/5.6.0\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nlet _logLevel = LogLevels[\"default\"];\nlet _globalLogger = null;\n\nfunction _checkNormalize() {\n  try {\n    const missing = []; // Make sure all forms of normalization are supported\n\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(form => {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n\n  return null;\n}\n\nconst _normalizeError = _checkNormalize();\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\n\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\"; // Not Implemented\n\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\"; // Unsupported Operation\n  //   - operation\n\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\"; // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\"; // Some sort of bad response from the server\n\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\"; // Timeout\n\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\"; ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\"; // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\"; ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\"; // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\"; // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\"; // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\"; ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\"; // Insufficient funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\"; // Nonce has already been used\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\"; // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\"; // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\"; // The transaction was replaced by one with a higher gas price\n  //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n  //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n  //   - hash: original transaction hash\n  //   - replacement: the full TransactionsResponse for the replacement\n  //   - receipt: the receipt of the replacement\n\n  ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n\nconst HEX = \"0123456789abcdef\";\n\nclass Logger {\n  constructor(version) {\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n\n  _log(logLevel, args) {\n    const level = logLevel.toLowerCase();\n\n    if (LogLevels[level] == null) {\n      this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n    }\n\n    if (_logLevel > LogLevels[level]) {\n      return;\n    }\n\n    console.log.apply(console, args);\n  }\n\n  debug() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    this._log(Logger.levels.DEBUG, args);\n  }\n\n  info() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    this._log(Logger.levels.INFO, args);\n  }\n\n  warn() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    this._log(Logger.levels.WARNING, args);\n  }\n\n  makeError(message, code, params) {\n    // Errors are being censored\n    if (_censorErrors) {\n      return this.makeError(\"censored error\", code, {});\n    }\n\n    if (!code) {\n      code = Logger.errors.UNKNOWN_ERROR;\n    }\n\n    if (!params) {\n      params = {};\n    }\n\n    const messageDetails = [];\n    Object.keys(params).forEach(key => {\n      const value = params[key];\n\n      try {\n        if (value instanceof Uint8Array) {\n          let hex = \"\";\n\n          for (let i = 0; i < value.length; i++) {\n            hex += HEX[value[i] >> 4];\n            hex += HEX[value[i] & 0x0f];\n          }\n\n          messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n        } else {\n          messageDetails.push(key + \"=\" + JSON.stringify(value));\n        }\n      } catch (error) {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n      }\n    });\n    messageDetails.push(`code=${code}`);\n    messageDetails.push(`version=${this.version}`);\n    const reason = message;\n    let url = \"\";\n\n    switch (code) {\n      case ErrorCode.NUMERIC_FAULT:\n        {\n          url = \"NUMERIC_FAULT\";\n          const fault = message;\n\n          switch (fault) {\n            case \"overflow\":\n            case \"underflow\":\n            case \"division-by-zero\":\n              url += \"-\" + fault;\n              break;\n\n            case \"negative-power\":\n            case \"negative-width\":\n              url += \"-unsupported\";\n              break;\n\n            case \"unbound-bitwise-result\":\n              url += \"-unbound-result\";\n              break;\n          }\n\n          break;\n        }\n\n      case ErrorCode.CALL_EXCEPTION:\n      case ErrorCode.INSUFFICIENT_FUNDS:\n      case ErrorCode.MISSING_NEW:\n      case ErrorCode.NONCE_EXPIRED:\n      case ErrorCode.REPLACEMENT_UNDERPRICED:\n      case ErrorCode.TRANSACTION_REPLACED:\n      case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n        url = code;\n        break;\n    }\n\n    if (url) {\n      message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n    }\n\n    if (messageDetails.length) {\n      message += \" (\" + messageDetails.join(\", \") + \")\";\n    } // @TODO: Any??\n\n\n    const error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n      error[key] = params[key];\n    });\n    return error;\n  }\n\n  throwError(message, code, params) {\n    throw this.makeError(message, code, params);\n  }\n\n  throwArgumentError(message, name, value) {\n    return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n      argument: name,\n      value: value\n    });\n  }\n\n  assert(condition, message, code, params) {\n    if (!!condition) {\n      return;\n    }\n\n    this.throwError(message, code, params);\n  }\n\n  assertArgument(condition, message, name, value) {\n    if (!!condition) {\n      return;\n    }\n\n    this.throwArgumentError(message, name, value);\n  }\n\n  checkNormalize(message) {\n    if (_normalizeError) {\n      this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"String.prototype.normalize\",\n        form: _normalizeError\n      });\n    }\n  }\n\n  checkSafeUint53(value, message) {\n    if (typeof value !== \"number\") {\n      return;\n    }\n\n    if (message == null) {\n      message = \"value not safe\";\n    }\n\n    if (value < 0 || value >= 0x1fffffffffffff) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"out-of-safe-range\",\n        value: value\n      });\n    }\n\n    if (value % 1) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"non-integer\",\n        value: value\n      });\n    }\n  }\n\n  checkArgumentCount(count, expectedCount, message) {\n    if (message) {\n      message = \": \" + message;\n    } else {\n      message = \"\";\n    }\n\n    if (count < expectedCount) {\n      this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n\n    if (count > expectedCount) {\n      this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n  }\n\n  checkNew(target, kind) {\n    if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n\n  checkAbstract(target, kind) {\n    if (target === kind) {\n      this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n        name: target.name,\n        operation: \"new\"\n      });\n    } else if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n\n  static globalLogger() {\n    if (!_globalLogger) {\n      _globalLogger = new Logger(version$2);\n    }\n\n    return _globalLogger;\n  }\n\n  static setCensorship(censorship, permanent) {\n    if (!censorship && permanent) {\n      this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n\n    if (_permanentCensorErrors) {\n      if (!censorship) {\n        return;\n      }\n\n      this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n  }\n\n  static setLogLevel(logLevel) {\n    const level = LogLevels[logLevel.toLowerCase()];\n\n    if (level == null) {\n      Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n      return;\n    }\n\n    _logLevel = level;\n  }\n\n  static from(version) {\n    return new Logger(version);\n  }\n\n}\n\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\nconst version$1 = \"bytes/5.6.0\";\nconst logger = new Logger(version$1); ///////////////////////////////\n\nfunction isHexable(value) {\n  return !!value.toHexString;\n}\n\nfunction addSlice(array) {\n  if (array.slice) {\n    return array;\n  }\n\n  array.slice = function () {\n    const args = Array.prototype.slice.call(arguments);\n    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n  };\n\n  return array;\n}\n\nfunction isInteger(value) {\n  return typeof value === \"number\" && value == value && value % 1 === 0;\n}\n\nfunction isBytes(value) {\n  if (value == null) {\n    return false;\n  }\n\n  if (value.constructor === Uint8Array) {\n    return true;\n  }\n\n  if (typeof value === \"string\") {\n    return false;\n  }\n\n  if (!isInteger(value.length) || value.length < 0) {\n    return false;\n  }\n\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i];\n\n    if (!isInteger(v) || v < 0 || v >= 256) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction arrayify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid arrayify value\");\n    const result = [];\n\n    while (value) {\n      result.unshift(value & 0xff);\n      value = parseInt(String(value / 256));\n    }\n\n    if (result.length === 0) {\n      result.push(0);\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    value = value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    let hex = value.substring(2);\n\n    if (hex.length % 2) {\n      if (options.hexPad === \"left\") {\n        hex = \"0x0\" + hex.substring(2);\n      } else if (options.hexPad === \"right\") {\n        hex += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    const result = [];\n\n    for (let i = 0; i < hex.length; i += 2) {\n      result.push(parseInt(hex.substring(i, i + 2), 16));\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (isBytes(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n\n  return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\n\nfunction isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nconst version = \"sha2/5.6.0\";\nnew Logger(version);\n\nfunction sha256(data) {\n  return \"0x\" + hash.sha256().update(arrayify(data)).digest(\"hex\");\n}\n\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n\n} // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\n\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n\n}\n\nconst SOLANA_SCHEMA = new Map();\n/**\n * Maximum length of derived pubkey seed\n */\n\nconst MAX_SEED_LENGTH = 32;\n/**\n * Value to be converted into public key\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n/**\n * A public key\n */\n\n\nclass PublicKey extends Struct {\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    this._bn = void 0;\n\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n  /**\n   * Default public key value. (All zeros)\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n\n\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON() {\n    return this.toBase58();\n  }\n  /**\n   * Return the byte array representation of the public key\n   */\n\n\n  toBytes() {\n    return this.toBuffer();\n  }\n  /**\n   * Return the Buffer representation of the public key\n   */\n\n\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toString() {\n    return this.toBase58();\n  }\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n\n  /* eslint-disable require-await */\n\n\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n\n  /* eslint-disable require-await */\n\n\n  static async createProgramAddress(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n\n\n  static async findProgramAddress(seeds, programId) {\n    let nonce = 255;\n    let address;\n\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n\n        nonce--;\n        continue;\n      }\n\n      return [address, nonce];\n    }\n\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n\n\n  static isOnCurve(pubkey) {\n    return is_on_curve(pubkey) == 1;\n  }\n\n}\n\nPublicKey.default = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n}); // @ts-ignore\n\nlet naclLowLevel = nacl.lowlevel; // Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\n\nfunction is_on_curve(p) {\n  var r = [naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf()];\n  var t = naclLowLevel.gf(),\n      chk = naclLowLevel.gf(),\n      num = naclLowLevel.gf(),\n      den = naclLowLevel.gf(),\n      den2 = naclLowLevel.gf(),\n      den4 = naclLowLevel.gf(),\n      den6 = naclLowLevel.gf();\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\n\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n      d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\n\n\nclass Account {\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    this._keypair = void 0;\n\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The **unencrypted** secret key for this account\n   */\n\n\n  get secretKey() {\n    return toBuffer(this._keypair.secretKey);\n  }\n\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n/**\n * Layout for a public key\n */\n\nconst publicKey = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a Rust String type\n */\n\n\nconst rustString = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n\n  const _decode = rsl.decode.bind(rsl);\n\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl;\n\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n\n  return rslShim;\n};\n/**\n * Layout for an Authorized object\n */\n\n\nconst authorized = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\n\nconst lockup = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n/**\n *  Layout for a VoteInit object\n */\n\n\nconst voteInit = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteInit';\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\nfunction getAlloc(type, fields) {\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n\n  return len;\n}\n\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n/**\n * The message header, identifying signed and read-only account\n */\n\n\nconst PUBKEY_LENGTH = 32;\n/**\n * List of instructions to be processed atomically\n */\n\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index) {\n    return index < this.header.numRequiredSignatures - this.header.numReadonlySignedAccounts || index >= this.header.numRequiredSignatures && index < this.accountKeys.length - this.header.numReadonlyUnsignedAccounts;\n  }\n\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n  /**\n   * Decode a compiled message into a Message object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = byteArray.shift();\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountCount = decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n\n}\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\n\n\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\n\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst SIGNATURE_LENGTH = 64;\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\n\nclass TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n  constructor(opts) {\n    this.keys = void 0;\n    this.programId = void 0;\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n}\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\n\n\nclass Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n\n    return null;\n  }\n  /**\n   * The transaction fee payer\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n\n\n  constructor(opts) {\n    this.signatures = [];\n    this.feePayer = void 0;\n    this.instructions = [];\n    this.recentBlockhash = void 0;\n    this.nonceInfo = void 0;\n    opts && Object.assign(this, opts);\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   */\n\n\n  add() {\n    for (var _len4 = arguments.length, items = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      items[_key4] = arguments[_key4];\n    }\n\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n  /**\n   * Compile transaction data\n   */\n\n\n  compileMessage() {\n    const {\n      nonceInfo\n    } = this;\n\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n\n    const {\n      recentBlockhash\n    } = this;\n\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer;\n\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n\n    const programIds = [];\n    const accountMetas = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({ ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    }); // Append programID account metas\n\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    }); // Sort. Prioritizing first by signer, then by writable\n\n    accountMetas.sort(function (x, y) {\n      const pubkeySorting = x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable = x.isWritable === y.isWritable ? pubkeySorting : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    }); // Cull duplicate account metas\n\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    }); // Move fee payer to the front\n\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    } // Disallow unknown signers\n\n\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(_ref => {\n      let {\n        pubkey,\n        isSigner,\n        isWritable\n      } = _ref;\n\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    instructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n\n\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n\n\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n\n\n  setSigners() {\n    for (var _len5 = arguments.length, signers = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      signers[_key5] = arguments[_key5];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n\n\n  sign() {\n    for (var _len6 = arguments.length, signers = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      signers[_key6] = arguments[_key6];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n\n    this._verifySignatures(message.serialize(), true);\n  }\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n\n\n  partialSign() {\n    for (var _len7 = arguments.length, signers = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      signers[_key7] = arguments[_key7];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * @internal\n   */\n\n\n  _partialSign(message) {\n    const signData = message.serialize();\n\n    for (var _len8 = arguments.length, signers = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n      signers[_key8 - 1] = arguments[_key8];\n    }\n\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n\n\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n\n\n    this._addSignature(pubkey, signature);\n  }\n  /**\n   * @internal\n   */\n\n\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n\n\n  verifySignatures() {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n  /**\n   * @internal\n   */\n\n\n  _verifySignatures(signData, requireAllSignatures) {\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n\n\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n\n    if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n  /**\n   * @internal\n   */\n\n\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach((_ref2, index) => {\n      let {\n        signature\n      } = _ref2;\n\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n  /**\n   * Populate Transaction object from message and signatures\n   */\n\n\n  static populate(message) {\n    let signatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    return transaction;\n  }\n\n}\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n} // zzz\n\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\n\n\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\n\nfunction decodeData(type, buffer) {\n  let data;\n\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n\n  return data;\n}\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\n\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n/**\n * NonceAccount class\n */\n\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n\n}\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\n\n\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\n\n\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), rustString('seed'), publicKey('programId')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n\n\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n\n\n  static transfer(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: params.lamports\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n\n\n  static assign(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n\n\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n\n\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n\n\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n\n\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n\n\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n\n\n  static allocate(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111'); // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\n\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n\n\n  static getMinNumSignatures(dataLength) {\n    return 2 * ( // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 + // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length); // Fetch program account info to check if it has already been created\n\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      } // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n\n\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      })); // Delay between sends in an attempt to reduce rate limit errors\n\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n\n    await Promise.all(transactions); // Finalize the account loaded with program data for execution\n\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      });\n    } // success\n\n    return true;\n  }\n\n}\n\nLoader.chunkSize = CHUNK_SIZE;\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n\n}\n\nvar browserPonyfill = {\n  exports: {}\n};\n\n(function (module, exports) {\n  var global = typeof self !== 'undefined' ? self : commonjsGlobal;\n\n  var __self__ = function () {\n    function F() {\n      this.fetch = false;\n      this.DOMException = global.DOMException;\n    }\n\n    F.prototype = global;\n    return new F();\n  }();\n\n  (function (self) {\n    (function (exports) {\n      var support = {\n        searchParams: 'URLSearchParams' in self,\n        iterable: 'Symbol' in self && 'iterator' in Symbol,\n        blob: 'FileReader' in self && 'Blob' in self && function () {\n          try {\n            new Blob();\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }(),\n        formData: 'FormData' in self,\n        arrayBuffer: 'ArrayBuffer' in self\n      };\n\n      function isDataView(obj) {\n        return obj && DataView.prototype.isPrototypeOf(obj);\n      }\n\n      if (support.arrayBuffer) {\n        var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];\n\n        var isArrayBufferView = ArrayBuffer.isView || function (obj) {\n          return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;\n        };\n      }\n\n      function normalizeName(name) {\n        if (typeof name !== 'string') {\n          name = String(name);\n        }\n\n        if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n          throw new TypeError('Invalid character in header field name');\n        }\n\n        return name.toLowerCase();\n      }\n\n      function normalizeValue(value) {\n        if (typeof value !== 'string') {\n          value = String(value);\n        }\n\n        return value;\n      } // Build a destructive iterator for the value list\n\n\n      function iteratorFor(items) {\n        var iterator = {\n          next: function () {\n            var value = items.shift();\n            return {\n              done: value === undefined,\n              value: value\n            };\n          }\n        };\n\n        if (support.iterable) {\n          iterator[Symbol.iterator] = function () {\n            return iterator;\n          };\n        }\n\n        return iterator;\n      }\n\n      function Headers(headers) {\n        this.map = {};\n\n        if (headers instanceof Headers) {\n          headers.forEach(function (value, name) {\n            this.append(name, value);\n          }, this);\n        } else if (Array.isArray(headers)) {\n          headers.forEach(function (header) {\n            this.append(header[0], header[1]);\n          }, this);\n        } else if (headers) {\n          Object.getOwnPropertyNames(headers).forEach(function (name) {\n            this.append(name, headers[name]);\n          }, this);\n        }\n      }\n\n      Headers.prototype.append = function (name, value) {\n        name = normalizeName(name);\n        value = normalizeValue(value);\n        var oldValue = this.map[name];\n        this.map[name] = oldValue ? oldValue + ', ' + value : value;\n      };\n\n      Headers.prototype['delete'] = function (name) {\n        delete this.map[normalizeName(name)];\n      };\n\n      Headers.prototype.get = function (name) {\n        name = normalizeName(name);\n        return this.has(name) ? this.map[name] : null;\n      };\n\n      Headers.prototype.has = function (name) {\n        return this.map.hasOwnProperty(normalizeName(name));\n      };\n\n      Headers.prototype.set = function (name, value) {\n        this.map[normalizeName(name)] = normalizeValue(value);\n      };\n\n      Headers.prototype.forEach = function (callback, thisArg) {\n        for (var name in this.map) {\n          if (this.map.hasOwnProperty(name)) {\n            callback.call(thisArg, this.map[name], name, this);\n          }\n        }\n      };\n\n      Headers.prototype.keys = function () {\n        var items = [];\n        this.forEach(function (value, name) {\n          items.push(name);\n        });\n        return iteratorFor(items);\n      };\n\n      Headers.prototype.values = function () {\n        var items = [];\n        this.forEach(function (value) {\n          items.push(value);\n        });\n        return iteratorFor(items);\n      };\n\n      Headers.prototype.entries = function () {\n        var items = [];\n        this.forEach(function (value, name) {\n          items.push([name, value]);\n        });\n        return iteratorFor(items);\n      };\n\n      if (support.iterable) {\n        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n      }\n\n      function consumed(body) {\n        if (body.bodyUsed) {\n          return Promise.reject(new TypeError('Already read'));\n        }\n\n        body.bodyUsed = true;\n      }\n\n      function fileReaderReady(reader) {\n        return new Promise(function (resolve, reject) {\n          reader.onload = function () {\n            resolve(reader.result);\n          };\n\n          reader.onerror = function () {\n            reject(reader.error);\n          };\n        });\n      }\n\n      function readBlobAsArrayBuffer(blob) {\n        var reader = new FileReader();\n        var promise = fileReaderReady(reader);\n        reader.readAsArrayBuffer(blob);\n        return promise;\n      }\n\n      function readBlobAsText(blob) {\n        var reader = new FileReader();\n        var promise = fileReaderReady(reader);\n        reader.readAsText(blob);\n        return promise;\n      }\n\n      function readArrayBufferAsText(buf) {\n        var view = new Uint8Array(buf);\n        var chars = new Array(view.length);\n\n        for (var i = 0; i < view.length; i++) {\n          chars[i] = String.fromCharCode(view[i]);\n        }\n\n        return chars.join('');\n      }\n\n      function bufferClone(buf) {\n        if (buf.slice) {\n          return buf.slice(0);\n        } else {\n          var view = new Uint8Array(buf.byteLength);\n          view.set(new Uint8Array(buf));\n          return view.buffer;\n        }\n      }\n\n      function Body() {\n        this.bodyUsed = false;\n\n        this._initBody = function (body) {\n          this._bodyInit = body;\n\n          if (!body) {\n            this._bodyText = '';\n          } else if (typeof body === 'string') {\n            this._bodyText = body;\n          } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n            this._bodyBlob = body;\n          } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n            this._bodyFormData = body;\n          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n            this._bodyText = body.toString();\n          } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n            this._bodyArrayBuffer = bufferClone(body.buffer); // IE 10-11 can't handle a DataView body.\n\n            this._bodyInit = new Blob([this._bodyArrayBuffer]);\n          } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n            this._bodyArrayBuffer = bufferClone(body);\n          } else {\n            this._bodyText = body = Object.prototype.toString.call(body);\n          }\n\n          if (!this.headers.get('content-type')) {\n            if (typeof body === 'string') {\n              this.headers.set('content-type', 'text/plain;charset=UTF-8');\n            } else if (this._bodyBlob && this._bodyBlob.type) {\n              this.headers.set('content-type', this._bodyBlob.type);\n            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n              this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n            }\n          }\n        };\n\n        if (support.blob) {\n          this.blob = function () {\n            var rejected = consumed(this);\n\n            if (rejected) {\n              return rejected;\n            }\n\n            if (this._bodyBlob) {\n              return Promise.resolve(this._bodyBlob);\n            } else if (this._bodyArrayBuffer) {\n              return Promise.resolve(new Blob([this._bodyArrayBuffer]));\n            } else if (this._bodyFormData) {\n              throw new Error('could not read FormData body as blob');\n            } else {\n              return Promise.resolve(new Blob([this._bodyText]));\n            }\n          };\n\n          this.arrayBuffer = function () {\n            if (this._bodyArrayBuffer) {\n              return consumed(this) || Promise.resolve(this._bodyArrayBuffer);\n            } else {\n              return this.blob().then(readBlobAsArrayBuffer);\n            }\n          };\n        }\n\n        this.text = function () {\n          var rejected = consumed(this);\n\n          if (rejected) {\n            return rejected;\n          }\n\n          if (this._bodyBlob) {\n            return readBlobAsText(this._bodyBlob);\n          } else if (this._bodyArrayBuffer) {\n            return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));\n          } else if (this._bodyFormData) {\n            throw new Error('could not read FormData body as text');\n          } else {\n            return Promise.resolve(this._bodyText);\n          }\n        };\n\n        if (support.formData) {\n          this.formData = function () {\n            return this.text().then(decode);\n          };\n        }\n\n        this.json = function () {\n          return this.text().then(JSON.parse);\n        };\n\n        return this;\n      } // HTTP methods whose capitalization should be normalized\n\n\n      var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n      function normalizeMethod(method) {\n        var upcased = method.toUpperCase();\n        return methods.indexOf(upcased) > -1 ? upcased : method;\n      }\n\n      function Request(input, options) {\n        options = options || {};\n        var body = options.body;\n\n        if (input instanceof Request) {\n          if (input.bodyUsed) {\n            throw new TypeError('Already read');\n          }\n\n          this.url = input.url;\n          this.credentials = input.credentials;\n\n          if (!options.headers) {\n            this.headers = new Headers(input.headers);\n          }\n\n          this.method = input.method;\n          this.mode = input.mode;\n          this.signal = input.signal;\n\n          if (!body && input._bodyInit != null) {\n            body = input._bodyInit;\n            input.bodyUsed = true;\n          }\n        } else {\n          this.url = String(input);\n        }\n\n        this.credentials = options.credentials || this.credentials || 'same-origin';\n\n        if (options.headers || !this.headers) {\n          this.headers = new Headers(options.headers);\n        }\n\n        this.method = normalizeMethod(options.method || this.method || 'GET');\n        this.mode = options.mode || this.mode || null;\n        this.signal = options.signal || this.signal;\n        this.referrer = null;\n\n        if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n          throw new TypeError('Body not allowed for GET or HEAD requests');\n        }\n\n        this._initBody(body);\n      }\n\n      Request.prototype.clone = function () {\n        return new Request(this, {\n          body: this._bodyInit\n        });\n      };\n\n      function decode(body) {\n        var form = new FormData();\n        body.trim().split('&').forEach(function (bytes) {\n          if (bytes) {\n            var split = bytes.split('=');\n            var name = split.shift().replace(/\\+/g, ' ');\n            var value = split.join('=').replace(/\\+/g, ' ');\n            form.append(decodeURIComponent(name), decodeURIComponent(value));\n          }\n        });\n        return form;\n      }\n\n      function parseHeaders(rawHeaders) {\n        var headers = new Headers(); // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n        // https://tools.ietf.org/html/rfc7230#section-3.2\n\n        var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n        preProcessedHeaders.split(/\\r?\\n/).forEach(function (line) {\n          var parts = line.split(':');\n          var key = parts.shift().trim();\n\n          if (key) {\n            var value = parts.join(':').trim();\n            headers.append(key, value);\n          }\n        });\n        return headers;\n      }\n\n      Body.call(Request.prototype);\n\n      function Response(bodyInit, options) {\n        if (!options) {\n          options = {};\n        }\n\n        this.type = 'default';\n        this.status = options.status === undefined ? 200 : options.status;\n        this.ok = this.status >= 200 && this.status < 300;\n        this.statusText = 'statusText' in options ? options.statusText : 'OK';\n        this.headers = new Headers(options.headers);\n        this.url = options.url || '';\n\n        this._initBody(bodyInit);\n      }\n\n      Body.call(Response.prototype);\n\n      Response.prototype.clone = function () {\n        return new Response(this._bodyInit, {\n          status: this.status,\n          statusText: this.statusText,\n          headers: new Headers(this.headers),\n          url: this.url\n        });\n      };\n\n      Response.error = function () {\n        var response = new Response(null, {\n          status: 0,\n          statusText: ''\n        });\n        response.type = 'error';\n        return response;\n      };\n\n      var redirectStatuses = [301, 302, 303, 307, 308];\n\n      Response.redirect = function (url, status) {\n        if (redirectStatuses.indexOf(status) === -1) {\n          throw new RangeError('Invalid status code');\n        }\n\n        return new Response(null, {\n          status: status,\n          headers: {\n            location: url\n          }\n        });\n      };\n\n      exports.DOMException = self.DOMException;\n\n      try {\n        new exports.DOMException();\n      } catch (err) {\n        exports.DOMException = function (message, name) {\n          this.message = message;\n          this.name = name;\n          var error = Error(message);\n          this.stack = error.stack;\n        };\n\n        exports.DOMException.prototype = Object.create(Error.prototype);\n        exports.DOMException.prototype.constructor = exports.DOMException;\n      }\n\n      function fetch(input, init) {\n        return new Promise(function (resolve, reject) {\n          var request = new Request(input, init);\n\n          if (request.signal && request.signal.aborted) {\n            return reject(new exports.DOMException('Aborted', 'AbortError'));\n          }\n\n          var xhr = new XMLHttpRequest();\n\n          function abortXhr() {\n            xhr.abort();\n          }\n\n          xhr.onload = function () {\n            var options = {\n              status: xhr.status,\n              statusText: xhr.statusText,\n              headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n            };\n            options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n            var body = 'response' in xhr ? xhr.response : xhr.responseText;\n            resolve(new Response(body, options));\n          };\n\n          xhr.onerror = function () {\n            reject(new TypeError('Network request failed'));\n          };\n\n          xhr.ontimeout = function () {\n            reject(new TypeError('Network request failed'));\n          };\n\n          xhr.onabort = function () {\n            reject(new exports.DOMException('Aborted', 'AbortError'));\n          };\n\n          xhr.open(request.method, request.url, true);\n\n          if (request.credentials === 'include') {\n            xhr.withCredentials = true;\n          } else if (request.credentials === 'omit') {\n            xhr.withCredentials = false;\n          }\n\n          if ('responseType' in xhr && support.blob) {\n            xhr.responseType = 'blob';\n          }\n\n          request.headers.forEach(function (value, name) {\n            xhr.setRequestHeader(name, value);\n          });\n\n          if (request.signal) {\n            request.signal.addEventListener('abort', abortXhr);\n\n            xhr.onreadystatechange = function () {\n              // DONE (success or failure)\n              if (xhr.readyState === 4) {\n                request.signal.removeEventListener('abort', abortXhr);\n              }\n            };\n          }\n\n          xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n        });\n      }\n\n      fetch.polyfill = true;\n\n      if (!self.fetch) {\n        self.fetch = fetch;\n        self.Headers = Headers;\n        self.Request = Request;\n        self.Response = Response;\n      }\n\n      exports.Headers = Headers;\n      exports.Request = Request;\n      exports.Response = Response;\n      exports.fetch = fetch;\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n      return exports;\n    })({});\n  })(__self__);\n\n  __self__.fetch.ponyfill = true; // Remove \"polyfill\" property added by whatwg-fetch\n\n  delete __self__.fetch.polyfill; // Choose between native implementation (global) or custom implementation (__self__)\n  // var ctx = global.fetch ? global : __self__;\n\n  var ctx = __self__; // this line disable service worker support temporarily\n\n  exports = ctx.fetch; // To enable: import fetch from 'cross-fetch'\n\n  exports.default = ctx.fetch; // For TypeScript consumers without esModuleInterop.\n\n  exports.fetch = ctx.fetch; // To enable: import {fetch} from 'cross-fetch'\n\n  exports.Headers = ctx.Headers;\n  exports.Request = ctx.Request;\n  exports.Response = ctx.Response;\n  module.exports = exports;\n})(browserPonyfill, browserPonyfill.exports);\n\nvar fetch = /*@__PURE__*/getDefaultExportFromCjs(browserPonyfill.exports);\nconst MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\n\n\nclass EpochSchedule {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    this.slotsPerEpoch = void 0;\n    this.leaderScheduleSlotOffset = void 0;\n    this.warmup = void 0;\n    this.firstNormalEpoch = void 0;\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n\n}\n\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n\n} // TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\n\n\nconst NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nconst DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nfunction promiseTimeout(promise, timeoutMs) {\n  let timeoutId;\n  const timeoutPromise = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n  return Promise.race([promise, timeoutPromise]).then(result => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n\nfunction makeWebsocketUrl(endpoint) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = ''; // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n\n  return url.toString();\n}\n\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * @internal\n */\n\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return { ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n/**\n * @internal\n */\n\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n/**\n * @internal\n */\n\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\n\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number()\n}))));\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nconst SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number())\n}));\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\n\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, useHttps, httpHeaders, fetchMiddleware, disableRetryOnRateLimit) {\n  let fetchWithMiddleware;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (url, options) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(url, options, (modifiedUrl, modifiedOptions) => resolve([modifiedUrl, modifiedOptions]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {})\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429\n        /* Too many requests */\n        ) {\n          break;\n        }\n\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n\n        too_many_requests_retries -= 1;\n\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n\n        console.log(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {}\n  }, {});\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\n\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nconst SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\n\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\n\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\n\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\n\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\n\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string()\n  })\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(type({\n      pubkey: PublicKeyFromString,\n      signer: boolean(),\n      writable: boolean()\n    })),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string()\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\n/**\n * @internal\n */\n\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\n\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult\n})));\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\n\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\n\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nconst SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\n\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\n\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\n\nclass Connection {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, commitmentOrConfig) {\n    this._commitment = void 0;\n    this._confirmTransactionInitialTimeout = void 0;\n    this._rpcEndpoint = void 0;\n    this._rpcWsEndpoint = void 0;\n    this._rpcClient = void 0;\n    this._rpcRequest = void 0;\n    this._rpcBatchRequest = void 0;\n    this._rpcWebSocket = void 0;\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketHeartbeat = null;\n    this._rpcWebSocketIdleTimeout = null;\n    this._disableBlockhashCaching = false;\n    this._pollingBlockhash = false;\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    this._accountChangeSubscriptionCounter = 0;\n    this._accountChangeSubscriptions = {};\n    this._programAccountChangeSubscriptionCounter = 0;\n    this._programAccountChangeSubscriptions = {};\n    this._rootSubscriptionCounter = 0;\n    this._rootSubscriptions = {};\n    this._signatureSubscriptionCounter = 0;\n    this._signatureSubscriptions = {};\n    this._slotSubscriptionCounter = 0;\n    this._slotSubscriptions = {};\n    this._logsSubscriptionCounter = 0;\n    this._logsSubscriptions = {};\n    this._slotUpdateSubscriptionCounter = 0;\n    this._slotUpdateSubscriptions = {};\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(url.toString(), useHttps, httpHeaders, fetchMiddleware, disableRetryOnRateLimit);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new Client(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n\n  get commitment() {\n    return this._commitment;\n  }\n  /**\n   * The RPC endpoint\n   */\n\n\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n\n\n  async getBalanceAndContext(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get balance for ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the balance for the specified public key\n   */\n\n\n  async getBalance(publicKey, commitment) {\n    return await this.getBalanceAndContext(publicKey, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Fetch the estimated production time of a block\n   */\n\n\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n\n    if ('error' in res) {\n      throw new Error('failed to get block time for slot ' + slot + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n\n\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get minimum ledger slot: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n\n\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get first available block: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch information about the current supply\n   */\n\n\n  async getSupply(config) {\n    let configArg = {};\n\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = { ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current supply of a token mint\n   */\n\n\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current balance of a token account\n   */\n\n\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get token account balance: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n\n\n  async getTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n\n\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n\n\n  async getLargestAccounts(config) {\n    const arg = { ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n\n\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get token largest accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n\n\n  async getAccountInfoAndContext(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n\n\n  async getParsedAccountInfo(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key\n   */\n\n\n  async getAccountInfo(publicKey, commitment) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n\n\n  async getMultipleAccountsInfoAndContext(publicKeys, commitment) {\n    const keys = publicKeys.map(key => key.toBase58());\n\n    const args = this._buildArgs([keys], commitment, 'base64');\n\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n\n    if ('error' in res) {\n      throw new Error('failed to get info for accounts ' + keys + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n\n\n  async getMultipleAccountsInfo(publicKeys, commitment) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitment);\n    return res.value;\n  }\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n\n\n  async getStakeActivation(publicKey, commitment, epoch) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined, epoch !== undefined ? {\n      epoch\n    } : undefined);\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n\n    if ('error' in res) {\n      throw new Error(`failed to get Stake Activation ${publicKey.toBase58()}: ${res.error.message}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n\n  async getProgramAccounts(programId, configOrCommitment) {\n    const extra = {};\n    let commitment;\n    let encoding;\n\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', extra);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n\n\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const extra = {};\n    let commitment;\n\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', extra);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n\n\n  async confirmTransaction(signature, commitment) {\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n    let subscriptionId;\n    let response = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(signature, (result, context) => {\n          subscriptionId = undefined;\n          response = {\n            context,\n            value: result\n          };\n          resolve(null);\n        }, subscriptionCommitment);\n      } catch (err) {\n        reject(err);\n      }\n    });\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip':\n        {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(`Transaction was not confirmed in ${duration.toFixed(2)} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`);\n    }\n\n    return response;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot that the node is processing\n   */\n\n\n  async getSlot(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n\n\n  async getSlotLeader(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n\n\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current status of a signature\n   */\n\n\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n\n\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n\n    if (config) {\n      params.push(config);\n    }\n\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n\n\n  async getTransactionCount(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n\n\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n\n\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n\n\n  async getInflationReward(addresses, epoch, commitment) {\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined, {\n      epoch\n    });\n\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Info parameters\n   */\n\n\n  async getEpochInfo(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n\n\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n\n\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n\n\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n\n\n  async getRecentPerformanceSamples(limit) {\n    const args = this._buildArgs(limit ? [limit] : []);\n\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', args);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get recent performance samples: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n\n\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n\n\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = message.serialize().toString('base64');\n\n    const args = this._buildArgs([wireMessage], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n\n\n  async getLatestBlockhash(commitment) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n\n\n  async getLatestBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the node version\n   */\n\n\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the genesis hash\n   */\n\n\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a processed block from the cluster.\n   */\n\n\n  async getBlock(slot, opts) {\n    const args = this._buildArgsAtLeastConfirmed([slot], opts && opts.commitment);\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    return { ...result,\n      transactions: result.transactions.map(_ref3 => {\n        let {\n          transaction,\n          meta\n        } = _ref3;\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: { ...transaction,\n            message\n          }\n        };\n      })\n    };\n  }\n  /*\n   * Returns the current block height of the node\n   */\n\n\n  async getBlockHeight(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get block height information: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n\n\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n\n    if ('error' in res) {\n      throw new Error('failed to get block production information: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n\n\n  async getTransaction(signature, opts) {\n    const args = this._buildArgsAtLeastConfirmed([signature], opts && opts.commitment);\n\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    return { ...result,\n      transaction: { ...result.transaction,\n        message: new Message(result.transaction.message)\n      }\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n\n\n  async getParsedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n\n\n  async getParsedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n\n\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = { ...result,\n      transactions: result.transactions.map(_ref4 => {\n        let {\n          transaction,\n          meta\n        } = _ref4;\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: { ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return { ...block,\n      transactions: block.transactions.map(_ref5 => {\n        let {\n          transaction,\n          meta\n        } = _ref5;\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n\n\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n\n\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n\n\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n\n\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return { ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n\n\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed transaction: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n\n\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new Error('failed to get confirmed transactions: ' + res.error.message);\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n\n\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n\n    while (!('until' in options)) {\n      startSlot--;\n\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n\n    while (!('before' in options)) {\n      endSlot++;\n\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed signatures for address: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get signatures for address: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n\n\n  async getNonceAndContext(nonceAccount, commitment) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitment);\n    let value = null;\n\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n\n\n  async getNonce(nonceAccount, commitment) {\n    return await this.getNonceAndContext(nonceAccount, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n\n\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n\n    if ('error' in res) {\n      throw new Error('airdrop to ' + to.toBase58() + ' failed: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  async _recentBlockhash(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n  /**\n   * @internal\n   */\n\n\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n\n    try {\n      const startTime = Date.now();\n\n      for (let i = 0; i < 50; i++) {\n        const {\n          blockhash\n        } = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return blockhash;\n        } // Sleep for approximately half a slot\n\n\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n  /**\n   * Simulate a transaction\n   */\n\n\n  async simulateTransaction(transactionOrMessage, signers, includeAccounts) {\n    let transaction;\n\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        if (!signers) break;\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n\n    const signData = message.serialize();\n\n    const wireTransaction = transaction._serialize(signData);\n\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * Sign and send a transaction\n   */\n\n\n  async sendTransaction(transaction, signers, options) {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n\n\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n\n\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnError(err) {\n    console.error('ws error:', err.message);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnClose(code) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n\n      return;\n    } // implicit close, prepare subscriptions for auto-reconnect\n\n\n    this._resetSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n\n  async _subscribe(sub, rpcMethod, rpcArgs) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n        }\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  async _unsubscribe(sub, rpcMethod) {\n    const subscriptionId = sub.subscriptionId;\n\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId = subscriptionId;\n\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._programAccountChangeSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._rootSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._signatureSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._slotSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._slotUpdateSubscriptions).forEach(s => s.subscriptionId = null);\n  }\n  /**\n   * @internal\n   */\n\n\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    const programKeys = Object.keys(this._programAccountChangeSubscriptions).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(Number);\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n\n    if (accountKeys.length === 0 && programKeys.length === 0 && slotKeys.length === 0 && slotUpdateKeys.length === 0 && signatureKeys.length === 0 && rootKeys.length === 0 && logsKeys.length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n\n      this._subscribe(sub, 'accountSubscribe', this._buildArgs([sub.publicKey], sub.commitment, 'base64'));\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n\n      this._subscribe(sub, 'programSubscribe', this._buildArgs([sub.programId], sub.commitment, 'base64', {\n        filters: sub.filters\n      }));\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args = [sub.signature];\n      if (sub.options) args.push(sub.options);\n\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n\n      if (typeof sub.filter === 'object') {\n        filter = {\n          mentions: [sub.filter.toString()]\n        };\n      } else {\n        filter = sub.filter;\n      }\n\n      this._subscribe(sub, 'logsSubscribe', this._buildArgs([filter], sub.commitment));\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnAccountNotification(notification) {\n    const res = create(notification, AccountNotificationResult);\n\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n\n\n  onAccountChange(publicKey, callback, commitment) {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeAccountChangeListener(id) {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnProgramAccountNotification(notification) {\n    const res = create(notification, ProgramAccountNotificationResult);\n\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {\n          value,\n          context\n        } = res.result;\n        sub.callback({\n          accountId: value.pubkey,\n          accountInfo: value.account\n        }, context);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n\n\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeProgramAccountChangeListener(id) {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n\n\n  onLogs(filter, callback, commitment) {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n\n\n  async removeOnLogsListener(id) {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnLogsNotification(notification) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotNotification(notification) {\n    const res = create(notification, SlotNotificationResult);\n\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n\n\n  onSlotChange(callback) {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeSlotChangeListener(id) {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotUpdatesNotification(notification) {\n    const res = create(notification, SlotUpdateNotificationResult);\n\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n\n\n  onSlotUpdate(callback) {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeSlotUpdateListener(id) {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment || encoding || extra) {\n      let options = {};\n\n      if (encoding) {\n        options.encoding = encoding;\n      }\n\n      if (commitment) {\n        options.commitment = commitment;\n      }\n\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n\n      args.push(options);\n    }\n\n    return args;\n  }\n  /**\n   * @internal\n   */\n\n\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n\n    return this._buildArgs(args, override, encoding, extra);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSignatureNotification(notification) {\n    const res = create(notification, SignatureNotificationResult);\n\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback({\n            type: 'received'\n          }, res.result.context);\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n\n          this._updateSubscriptions();\n\n          sub.callback({\n            type: 'status',\n            result: res.result.value\n          }, res.result.context);\n        }\n\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignature(signature, callback, commitment) {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {\n        commitment\n      },\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignatureWithOptions(signature, callback, options) {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeSignatureListener(id) {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnRootNotification(notification) {\n    const res = create(notification, RootNotificationResult);\n\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n\n\n  onRootChange(callback) {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeRootChangeListener(id) {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n\n}\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\n\n\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * Generate a new random keypair\n   */\n\n\n  static generate() {\n    return new Keypair(nacl.sign.keyPair());\n  }\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n\n\n  static fromSecretKey(secretKey, options) {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n\n    return new Keypair(keypair);\n  }\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n\n\n  static fromSeed(seed) {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n  /**\n   * The public key for this keypair\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The raw secret key for this keypair\n   */\n\n\n  get secretKey() {\n    return this._keypair.secretKey;\n  }\n\n}\n\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\n\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\n\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nclass Authorized {\n  /** stake authority */\n\n  /** withdraw authority */\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    this.staker = void 0;\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n\n}\n/**\n * Stake account lockup info\n */\n\n\nclass Lockup {\n  /** Unix timestamp of lockup expiration */\n\n  /** Epoch of lockup expiration */\n\n  /** Lockup custodian authority */\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    this.unixTimestamp = void 0;\n    this.epoch = void 0;\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n  /**\n   * Default, inactive Lockup value\n   */\n\n\n}\n\nLockup.default = new Lockup(0, 0, PublicKey.default);\n/**\n * Stake Instruction class\n */\n\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\n\n\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\n\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n\n\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n\n\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n\n\n  static split(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n\n\n  static splitWithSeed(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n\n\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n\n\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n\n\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\nStakeProgram.space = 200;\nconst {\n  publicKeyCreate,\n  ecdsaSign\n} = secp256k1;\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\n\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n\n\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n\n    try {\n      return Buffer.from(sha3.keccak_256.update(toBuffer(publicKey)).digest()).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n\n\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n\n      const messageHash = Buffer.from(sha3.keccak_256.update(toBuffer(message)).digest());\n      const {\n        signature,\n        recid: recoveryId\n      } = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\n\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nclass ValidatorInfo {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    this.key = void 0;\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n\n  static fromConfigData(buffer) {\n    const PUBKEY_LENGTH = 32;\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$7(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\n\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(), // votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(), // authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(), // epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\n\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n\n}\n\nfunction parseAuthorizedVoter(_ref6) {\n  let {\n    authorizedVoter,\n    epoch\n  } = _ref6;\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\n\nfunction parsePriorVoters(_ref7) {\n  let {\n    authorizedPubkey,\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  } = _ref7;\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\n\nfunction getPriorVoters(_ref8) {\n  let {\n    buf,\n    idx,\n    isEmpty\n  } = _ref8;\n\n  if (isEmpty) {\n    return [];\n  }\n\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n/**\n * Vote account info\n */\n\n\nclass VoteInit {\n  /** [0, 100] */\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n\n}\n/**\n * Create vote account transaction params\n */\n\n/**\n * Vote Instruction class\n */\n\n\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  }\n});\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\n\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Vote program\n */\n\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n\n\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n\n\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n\n\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\nVoteProgram.space = 3731;\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\n\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n\n  return url;\n}\n/**\n * There are 1-billion lamports in one SOL\n */\n\n\nconst LAMPORTS_PER_SOL = 1000000000;\nexport { Account, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, Loader, Lockup, MAX_SEED_LENGTH, Message, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PublicKey, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionInstruction, VALIDATOR_INFO_KEY, VOTE_PROGRAM_ID, ValidatorInfo, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"mappings":"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","names":["toBuffer","arr","Buffer","isBuffer","Uint8Array","from","buffer","byteOffset","byteLength","minimalisticAssert","assert","val","msg","Error","equal","assertEqual","l","r","Object","create","inherits_browserModule","inherits","ctor","superCtor","super_","prototype","constructor","value","enumerable","writable","configurable","TempCtor","require$$0","require$$1","isSurrogatePair","i","charCodeAt","length","toArray","enc","Array","isArray","slice","res","p","c","replace","push","parseInt","toHex","zero2","toString","htonl","w","toHex32","endian","zero8","word","join32","start","end","len","k","split32","m","rotr32","b","rotl32","sum32","a","sum32_3","sum32_4","d","sum32_5","e","sum64","buf","pos","ah","al","bh","bl","lo","hi","sum64_hi","sum64_lo","sum64_4_hi","ch","cl","dh","dl","carry","sum64_4_lo","sum64_5_hi","eh","el","sum64_5_lo","rotr64_hi","num","rotr64_lo","shr64_hi","shr64_lo","utils","BlockHash","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","update","concat","_update","digest","_pad","_digest","pad","bytes","t","ft_1","s","x","y","z","ch32","p32","maj32","s0_256","s1_256","g0_256","g1_256","common","shaCommon","require$$2","sha1_K","SHA1","call","h","W","_1","require$$3","sha256_K","SHA256","_256","f","g","T1","T2","SHA224","_224","sha512_K","SHA512","_512","_prepareBlock","c0_hi","g1_512_hi","c0_lo","g1_512_lo","c1_hi","c1_lo","c2_hi","g0_512_hi","c2_lo","g0_512_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","s1_512_hi","s1_512_lo","ch64_hi","ch64_lo","c4_hi","c4_lo","T1_hi","T1_lo","s0_512_hi","s0_512_lo","maj64_hi","maj64_lo","T2_hi","T2_lo","xh","xl","yh","yl","zh","zl","SHA384","_384","require$$4","RIPEMD160","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","j","T","K","rh","Kh","sh","Hmac","hash","key","Hash","inner","outer","_init","hmac","init","exports","sha","ripemd","sha1","sha256","sha224","sha384","sha512","ripemd160","version","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","_checkNormalize","missing","forEach","form","normalize","join","String","fromCharCode","message","_normalizeError","LogLevel","ErrorCode","HEX","Logger","defineProperty","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","hex","JSON","stringify","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","name","INVALID_ARGUMENT","argument","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","checkAbstract","globalLogger","setCensorship","censorship","permanent","setLogLevel","logger","isHexable","toHexString","addSlice","array","arguments","isInteger","isBytes","v","arrayify","options","result","unshift","allowMissingPrefix","substring","isHexString","hexPad","match","data","Struct","properties","assign","encode","serialize","SOLANA_SCHEMA","decode","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","map","Map","MAX_SEED_LENGTH","isPublicKeyData","_bn","undefined","PublicKey","decoded","bs58","BN","equals","publicKey","eq","toBase58","toBytes","toJSON","toArrayLike","zeroPad","alloc","copy","createWithSeed","fromPublicKey","seed","programId","createProgramAddress","seeds","TypeError","publicKeyBytes","is_on_curve","findProgramAddress","nonce","address","seedsWithNonce","err","isOnCurve","pubkey","default","set","fields","naclLowLevel","nacl","lowlevel","gf","chk","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","Z","pow2523","neq25519","I","pack25519","crypto_verify_32","Account","secretKey","_keypair","sign","keyPair","fromSecretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","getAlloc","type","layout","item","decodeLength","size","elem","shift","encodeLength","rem_len","PUBKEY_LENGTH","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","accounts","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","instructionLayout","seq","signDataLayout","Layout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","DEFAULT_SIGNATURE","fill","SIGNATURE_LENGTH","TransactionInstruction","opts","Transaction","signature","signatures","feePayer","nonceInfo","add","items","compileMessage","nonceInstruction","accountMetas","accountMeta","includes","isSigner","isWritable","sort","pubkeySorting","localeCompare","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","payerMeta","splice","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","signers","seen","Set","uniqueSigners","signer","_partialSign","_verifySignatures","partialSign","detached","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","verify","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","createAccount","transfer","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","owner","dataLayout","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","global","self","this","__self__","F","fetch","DOMException","support","searchParams","iterable","Symbol","Blob","formData","arrayBuffer","isDataView","obj","DataView","isPrototypeOf","viewClasses","isArrayBufferView","ArrayBuffer","isView","normalizeName","test","normalizeValue","iteratorFor","iterator","next","done","Headers","headers","append","getOwnPropertyNames","oldValue","get","hasOwnProperty","callback","thisArg","consumed","body","bodyUsed","reject","fileReaderReady","reader","onload","onerror","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","readBlobAsText","readAsText","readArrayBufferAsText","view","bufferClone","Body","_initBody","_bodyInit","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","rejected","then","text","json","parse","methods","normalizeMethod","method","upcased","toUpperCase","Request","input","credentials","mode","signal","referrer","clone","trim","split","decodeURIComponent","parseHeaders","rawHeaders","preProcessedHeaders","line","parts","Response","bodyInit","ok","statusText","response","redirectStatuses","redirect","RangeError","location","stack","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","ponyfill","ctx","module","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","promiseTimeout","timeoutMs","timeoutId","timeoutPromise","race","clearTimeout","makeWebsocketUrl","endpoint","URL","useHttps","protocol","host","port","Number","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","fetchWithMiddleware","modifiedFetchArgs","modifiedUrl","modifiedOptions","clientBrowser","RpcClient","agent","too_many_requests_retries","waitTime","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","lastValidBlockHeight","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","commitmentOrConfig","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","lastFetch","transactionSignatures","simulatedSignatures","_accountChangeSubscriptionCounter","_accountChangeSubscriptions","_programAccountChangeSubscriptionCounter","_programAccountChangeSubscriptions","_rootSubscriptionCounter","_rootSubscriptions","_signatureSubscriptionCounter","_signatureSubscriptions","_slotSubscriptionCounter","_slotSubscriptions","_logsSubscriptionCounter","_logsSubscriptions","_slotUpdateSubscriptionCounter","_slotUpdateSubscriptions","wsEndpoint","confirmTransactionInitialTimeout","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","catch","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleAccountsInfoAndContext","publicKeys","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","extra","encoding","filters","getParsedProgramAccounts","decodedSignature","Date","now","subscriptionCommitment","subscriptionId","confirmPromise","onSignature","removeSignatureListener","duration","toFixed","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatus","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","addresses","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","getBlockHeight","getBlockProduction","rest","getTransaction","getParsedTransaction","getParsedTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","transactionDetails","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getNonceAndContext","accountInfo","getNonce","requestAirdrop","to","_recentBlockhash","disableCache","timeSinceFetch","expired","_pollNewBlockhash","startTime","simulateTransaction","transactionOrMessage","includeAccounts","encodedTransaction","sigVerify","traceIndent","logTrace","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","_resetSubscriptions","_subscribe","sub","rpcMethod","rpcArgs","_unsubscribe","unsubscribeId","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","close","connect","mentions","notification","onAccountChange","removeAccountChangeListener","subInfo","accountId","onProgramAccountChange","removeProgramAccountChangeListener","onLogs","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","override","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","generate","skipValidation","encoder","TextEncoder","fromSeed","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","splitWithSeed","merge","withdraw","deactivate","publicKeyCreate","ecdsaSign","secp256k1","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","sha3","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","startsWith","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedWithdrawer","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","authorizedVoter","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","VoteInit","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","sendAndConfirmRawTransaction","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"sources":["C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\util\\to-buffer.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\minimalistic-assert\\index.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\inherits\\inherits_browser.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\utils.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\common.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\sha\\common.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\sha\\1.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\sha\\256.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\sha\\224.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\sha\\512.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\sha\\384.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\sha.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\ripemd.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\hmac.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\@ethersproject\\logger\\lib.esm\\_version.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\@ethersproject\\logger\\lib.esm\\index.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\@ethersproject\\bytes\\lib.esm\\_version.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\@ethersproject\\bytes\\lib.esm\\index.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\@ethersproject\\sha2\\lib.esm\\_version.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\@ethersproject\\sha2\\lib.esm\\sha2.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\util\\borsh-schema.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\publickey.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\account.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\bpf-loader-deprecated.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\layout.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\util\\shortvec-encoding.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\message.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\util\\assert.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\transaction.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\sysvar.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\util\\send-and-confirm-transaction.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\util\\sleep.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\instruction.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\fee-calculator.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\nonce-account.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\system-program.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\loader.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\bpf-loader.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\node_modules\\cross-fetch\\dist\\browser-ponyfill.js","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\epoch-schedule.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\errors.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\timing.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\util\\promise-timeout.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\util\\url.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\connection.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\keypair.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\ed25519-program.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\stake-program.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\secp256k1-program.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\validator-info.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\vote-account.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\vote-program.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\util\\send-and-confirm-raw-transaction.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\util\\cluster.ts","C:\\Users\\MSI\\Documents\\CG\\fullstackapp\\frontend-app\\node_modules\\@solana\\web3.js\\src\\index.ts"],"sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"bytes/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","export const version = \"sha2/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Connection} from './connection';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const pubkeySorting = x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58());\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? pubkeySorting : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: number;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        BufferLayout.ns64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport fetch from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware:\n    | ((url: string, options: any) => Promise<Response>)\n    | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (url: string, options: any) => {\n      const modifiedFetchArgs = await new Promise<[string, any]>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(url, options, (modifiedUrl, modifiedOptions) =>\n              resolve([modifiedUrl, modifiedOptions]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: (modifiedUrl: string, modifiedOptions: any) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitment,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n  async getLatestBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; lastValidBlockHeight: number}> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n  async getLatestBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; lastValidBlockHeight: number}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block height information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block production information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(\n            `${rpcMethod} error for argument`,\n            rpcArgs,\n            err.message,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './vote-program';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"]},"metadata":{},"sourceType":"module"}