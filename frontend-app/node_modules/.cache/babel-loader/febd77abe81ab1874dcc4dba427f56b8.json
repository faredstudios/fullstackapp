{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serialize = exports.deserializeUnchecked = exports.deserialize = exports.struct = exports.Data = exports.extendBorsh = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst borsh_1 = require(\"borsh\");\n\nObject.defineProperty(exports, \"deserializeUnchecked\", {\n  enumerable: true,\n  get: function () {\n    return borsh_1.deserializeUnchecked;\n  }\n});\nObject.defineProperty(exports, \"serialize\", {\n  enumerable: true,\n  get: function () {\n    return borsh_1.serialize;\n  }\n});\nObject.defineProperty(exports, \"deserialize\", {\n  enumerable: true,\n  get: function () {\n    return borsh_1.deserialize;\n  }\n});\n\nconst bs58_1 = __importDefault(require(\"bs58\"));\n\nconst extendBorsh = () => {\n  borsh_1.BinaryReader.prototype.readPubkey = function () {\n    const array = this.readFixedArray(32);\n    return new web3_js_1.PublicKey(array);\n  };\n\n  borsh_1.BinaryWriter.prototype.writePubkey = function (value) {\n    this.writeFixedArray(value.toBuffer());\n  };\n\n  borsh_1.BinaryReader.prototype.readPubkeyAsString = function () {\n    const array = this.readFixedArray(32);\n    return bs58_1.default.encode(array);\n  };\n\n  borsh_1.BinaryWriter.prototype.writePubkeyAsString = function (value) {\n    this.writeFixedArray(bs58_1.default.decode(value));\n  };\n};\n\nexports.extendBorsh = extendBorsh;\n(0, exports.extendBorsh)();\n\nclass Data {\n  constructor() {\n    let args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    Object.assign(this, args);\n  }\n\n  static struct(fields) {\n    return (0, exports.struct)(this, fields);\n  }\n\n  static serialize() {\n    let args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return Buffer.from((0, borsh_1.serialize)(this.SCHEMA, new this(args)));\n  }\n\n  static deserialize(data) {\n    return (0, borsh_1.deserializeUnchecked)(this.SCHEMA, this, data);\n  }\n\n}\n\nexports.Data = Data;\n\nconst struct = (type, fields) => {\n  return new Map([[type, {\n    kind: 'struct',\n    fields\n  }]]);\n};\n\nexports.struct = struct;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AA6EsBA;AAAAC;AAAAC;AAAA,WA5EpBC,4BA4EoB;AA5EA;AA4EA;AAAsBH;AAAAC;AAAAC;AAAA,WA3E1CC,iBA2E0C;AA3EjC;AA2EiC;AAAnCH;AAAAC;AAAAC;AAAA,WA1EPC,mBA0EO;AA1EI;AA0EJ;;AArET;;AAWO,MAAMC,WAAW,GAAG,MAAK;AAC7BD,uBAAaE,SAAb,CAAgDC,UAAhD,GAA6D;AAG5D,UAAMC,KAAK,GAAG,KAAKC,cAAL,CAAoB,EAApB,CAAd;AACA,WAAO,IAAIC,mBAAJ,CAAcF,KAAd,CAAP;AACD,GALA;;AAMAJ,uBAAaE,SAAb,CAAgDK,WAAhD,GAA8D,UAE7DC,KAF6D,EAE7C;AAEhB,SAAKC,eAAL,CAAqBD,KAAK,CAACE,QAAN,EAArB;AACD,GALA;;AAMAV,uBAAaE,SAAb,CAAgDS,kBAAhD,GAAqE;AAGpE,UAAMP,KAAK,GAAG,KAAKC,cAAL,CAAoB,EAApB,CAAd;AACA,WAAOO,eAAOC,MAAP,CAAcT,KAAd,CAAP;AACD,GALA;;AAMAJ,uBAAaE,SAAb,CAAgDY,mBAAhD,GAAsE,UAErEN,KAFqE,EAExD;AAEb,SAAKC,eAAL,CAAqBG,eAAOG,MAAP,CAAcP,KAAd,CAArB;AACD,GALA;AAMF,CAzBM;;AAAMQ,sBAAWf,WAAX;AA2Bb;;AAQA,MAAagB,IAAb,CAAiB;AACfC,gBAA6B;AAAA,QAAjBC,IAAiB,uEAAP,EAAO;AAC3BtB,UAAM,CAACuB,MAAP,CAAc,IAAd,EAAoBD,IAApB;AACD;;AAEY,SAANE,MAAM,CAAoCC,MAApC,EAA+C;AAC1D,WAAO,oBAAO,IAAP,EAAaA,MAAb,CAAP;AACD;;AAEe,SAATC,SAAS,GAAqD;AAAA,QAAjBJ,IAAiB,uEAAP,EAAO;AACnE,WAAOK,MAAM,CAACC,IAAP,CAAY,uBAAU,KAAKC,MAAf,EAAuB,IAAI,IAAJ,CAASP,IAAT,CAAvB,CAAZ,CAAP;AACD;;AAEiB,SAAXQ,WAAW,CAAoCC,IAApC,EAAgD;AAChE,WAAO,kCAAqB,KAAKF,MAA1B,EAAkC,IAAlC,EAAwCE,IAAxC,CAAP;AACD;;AAfc;;AAAjBZ;;AAkBO,MAAMK,MAAM,GAAG,CAACQ,IAAD,EAAYP,MAAZ,KAA2B;AAC/C,SAAO,IAAIQ,GAAJ,CAAkB,CAAC,CAACD,IAAD,EAAO;AAAEE,QAAI,EAAE,QAAR;AAAkBT;AAAlB,GAAP,CAAD,CAAlB,CAAP;AACD,CAFM;;AAAMN,iBAAMK,MAAN","names":["Object","enumerable","get","borsh_1","extendBorsh","prototype","readPubkey","array","readFixedArray","web3_js_1","writePubkey","value","writeFixedArray","toBuffer","readPubkeyAsString","bs58_1","encode","writePubkeyAsString","decode","exports","Data","constructor","args","assign","struct","fields","serialize","Buffer","from","SCHEMA","deserialize","data","type","Map","kind"],"sources":["../../../src/utils/borsh.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}