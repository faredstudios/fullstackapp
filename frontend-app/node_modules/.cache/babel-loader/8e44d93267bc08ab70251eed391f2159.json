{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Account = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst buffer_1 = require(\"buffer\");\n\nconst errors_1 = require(\"../errors\");\n\nclass Account {\n  constructor(pubkey, info) {\n    this.pubkey = new web3_js_1.PublicKey(pubkey);\n    this.info = info;\n  }\n\n  static from(account) {\n    return new this(account.pubkey, account.info);\n  }\n\n  static load(connection, pubkey) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const info = yield Account.getInfo(connection, pubkey);\n      return new this(pubkey, info);\n    });\n  }\n\n  static isCompatible(_data) {\n    throw new Error(`method 'isCompatible' is not implemented`);\n  }\n\n  static getInfo(connection, pubkey) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const info = yield connection.getAccountInfo(new web3_js_1.PublicKey(pubkey));\n\n      if (!info) {\n        throw (0, errors_1.ERROR_ACCOUNT_NOT_FOUND)(pubkey);\n      }\n\n      return Object.assign(Object.assign({}, info), {\n        data: buffer_1.Buffer.from(info === null || info === void 0 ? void 0 : info.data)\n      });\n    });\n  }\n\n  static getInfos(connection, pubkeys) {\n    let commitment = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'recent';\n    return __awaiter(this, void 0, void 0, function* () {\n      const BATCH_SIZE = 99;\n      const promises = [];\n\n      for (let i = 0; i < pubkeys.length; i += BATCH_SIZE) {\n        promises.push(Account.getMultipleAccounts(connection, pubkeys.slice(i, Math.min(pubkeys.length, i + BATCH_SIZE)), commitment));\n      }\n\n      const results = new Map();\n      (yield Promise.all(promises)).forEach(result => {\n        var _a;\n\n        return [...((_a = result === null || result === void 0 ? void 0 : result.entries()) !== null && _a !== void 0 ? _a : [])].forEach(_ref => {\n          let [k, v] = _ref;\n          return results.set(k, v);\n        });\n      });\n      return results;\n    });\n  }\n\n  static getMultipleAccounts(connection, pubkeys, commitment) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const args = connection._buildArgs([pubkeys.map(k => k.toString())], commitment, 'base64');\n\n      const unsafeRes = yield connection._rpcRequest('getMultipleAccounts', args);\n\n      if (unsafeRes.error) {\n        throw new Error('failed to get info about accounts ' + unsafeRes.error.message);\n      }\n\n      if (!unsafeRes.result.value) return;\n      const infos = unsafeRes.result.value.filter(Boolean).map(info => Object.assign(Object.assign({}, info), {\n        data: buffer_1.Buffer.from(info.data[0], 'base64')\n      }));\n      return infos.reduce((acc, info, index) => {\n        acc.set(pubkeys[index], info);\n        return acc;\n      }, new Map());\n    });\n  }\n\n  assertOwner(pubkey) {\n    var _a;\n\n    return (_a = this.info) === null || _a === void 0 ? void 0 : _a.owner.equals(new web3_js_1.PublicKey(pubkey));\n  }\n\n  toJSON() {\n    var _a, _b, _c, _d, _e;\n\n    return {\n      pubkey: this.pubkey.toString(),\n      info: {\n        executable: !!((_a = this.info) === null || _a === void 0 ? void 0 : _a.executable),\n        owner: ((_b = this.info) === null || _b === void 0 ? void 0 : _b.owner) ? new web3_js_1.PublicKey((_c = this.info) === null || _c === void 0 ? void 0 : _c.owner) : null,\n        lamports: (_d = this.info) === null || _d === void 0 ? void 0 : _d.lamports,\n        data: (_e = this.info) === null || _e === void 0 ? void 0 : _e.data.toJSON()\n      },\n      data: this.data\n    };\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n\n}\n\nexports.Account = Account;","map":{"version":3,"mappings":"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","names":["Account","constructor","pubkey","info","web3_js_1","from","account","load","connection","getInfo","isCompatible","_data","Error","getAccountInfo","data","buffer_1","getInfos","pubkeys","commitment","BATCH_SIZE","promises","i","length","push","getMultipleAccounts","slice","Math","min","results","Map","Promise","all","forEach","result","entries","_a","k","v","set","args","_buildArgs","map","toString","unsafeRes","_rpcRequest","error","message","value","infos","filter","Boolean","Object","reduce","acc","index","assertOwner","owner","equals","toJSON","executable","_b","_c","lamports","_d","_e","JSON","stringify","exports"],"sources":["../../../src/accounts/Account.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}