{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar _a;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SafetyDepositBox = exports.SafetyDepositBoxData = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst VaultProgram_1 = require(\"../VaultProgram\");\n\nconst buffer_1 = require(\"buffer\");\n\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\n\nclass SafetyDepositBoxData extends mpl_core_1.Borsh.Data {\n  constructor(args) {\n    super(args);\n    this.key = VaultProgram_1.VaultKey.SafetyDepositBoxV1;\n  }\n\n}\n\nexports.SafetyDepositBoxData = SafetyDepositBoxData;\n_a = SafetyDepositBoxData;\nSafetyDepositBoxData.SCHEMA = _a.struct([['key', 'u8'], ['vault', 'pubkeyAsString'], ['tokenMint', 'pubkeyAsString'], ['store', 'pubkeyAsString'], ['order', 'u8']]);\n\nclass SafetyDepositBox extends mpl_core_1.Account {\n  constructor(key, info) {\n    super(key, info);\n\n    if (!this.assertOwner(VaultProgram_1.VaultProgram.PUBKEY)) {\n      throw (0, mpl_core_1.ERROR_INVALID_OWNER)();\n    }\n\n    if (!SafetyDepositBox.isCompatible(this.info.data)) {\n      throw (0, mpl_core_1.ERROR_INVALID_ACCOUNT_DATA)();\n    }\n\n    this.data = SafetyDepositBoxData.deserialize(this.info.data);\n  }\n\n  static getPDA(vault, mint) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return VaultProgram_1.VaultProgram.findProgramAddress([buffer_1.Buffer.from(VaultProgram_1.VaultProgram.PREFIX), new web3_js_1.PublicKey(vault).toBuffer(), new web3_js_1.PublicKey(mint).toBuffer()]);\n    });\n  }\n\n  static isCompatible(data) {\n    return data[0] === VaultProgram_1.VaultKey.SafetyDepositBoxV1;\n  }\n\n}\n\nexports.SafetyDepositBox = SafetyDepositBox;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAeA,MAAaA,oBAAb,SAA0CC,iBAAMC,IAAhD,CAA0D;AAoBxDC,cAAYC,IAAZ,EAAsB;AACpB,UAAMA,IAAN;AACA,SAAKC,GAAL,GAAWC,wBAASC,kBAApB;AACD;;AAvBuD;;AAA1DC;;AACkBR,8BAASS,EAAI,CAACC,MAAL,CAAY,CACnC,CAAC,KAAD,EAAQ,IAAR,CADmC,EAEnC,CAAC,OAAD,EAAU,gBAAV,CAFmC,EAGnC,CAAC,WAAD,EAAc,gBAAd,CAHmC,EAInC,CAAC,OAAD,EAAU,gBAAV,CAJmC,EAKnC,CAAC,OAAD,EAAU,IAAV,CALmC,CAAZ,CAAT;;AAyBlB,MAAaC,gBAAb,SAAsCV,kBAAtC,CAAmE;AACjEE,cAAYE,GAAZ,EAA+BO,IAA/B,EAAwD;AACtD,UAAMP,GAAN,EAAWO,IAAX;;AAEA,QAAI,CAAC,KAAKC,WAAL,CAAiBP,4BAAaQ,MAA9B,CAAL,EAA4C;AAC1C,YAAM,qCAAN;AACD;;AAED,QAAI,CAACH,gBAAgB,CAACI,YAAjB,CAA8B,KAAKH,IAAL,CAAUI,IAAxC,CAAL,EAAoD;AAClD,YAAM,4CAAN;AACD;;AAED,SAAKA,IAAL,GAAYhB,oBAAoB,CAACiB,WAArB,CAAiC,KAAKL,IAAL,CAAUI,IAA3C,CAAZ;AACD;;AAEkB,SAANE,MAAM,CAACC,KAAD,EAAsBC,IAAtB,EAAwC;;AACzD,aAAOd,4BAAae,kBAAb,CAAgC,CACrCC,gBAAOC,IAAP,CAAYjB,4BAAakB,MAAzB,CADqC,EAErC,IAAIC,mBAAJ,CAAcN,KAAd,EAAqBO,QAArB,EAFqC,EAGrC,IAAID,mBAAJ,CAAcL,IAAd,EAAoBM,QAApB,EAHqC,CAAhC,CAAP;AAKD;AAAA;;AAEkB,SAAZX,YAAY,CAACC,IAAD,EAAa;AAC9B,WAAOA,IAAI,CAAC,CAAD,CAAJ,KAAYV,wBAASC,kBAA5B;AACD;;AAzBgE;;AAAnEC","names":["SafetyDepositBoxData","mpl_core_1","Data","constructor","args","key","VaultProgram_1","SafetyDepositBoxV1","exports","_a","struct","SafetyDepositBox","info","assertOwner","PUBKEY","isCompatible","data","deserialize","getPDA","vault","mint","findProgramAddress","buffer_1","from","PREFIX","web3_js_1","toBuffer"],"sources":["../../../src/accounts/SafetyDepositBox.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}