{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Program = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst accounts_1 = require(\"./accounts\");\n\nconst buffer_1 = require(\"buffer\");\n\nclass Program {\n  static findProgramAddress(seeds) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return (yield web3_js_1.PublicKey.findProgramAddress(seeds, this.PUBKEY))[0];\n    });\n  }\n\n  static getProgramAccounts(connection, configOrCommitment) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const extra = {};\n      let commitment;\n\n      if (configOrCommitment) {\n        if (typeof configOrCommitment === 'string') {\n          commitment = configOrCommitment;\n        } else {\n          commitment = configOrCommitment.commitment;\n\n          if (configOrCommitment.dataSlice) {\n            extra.dataSlice = configOrCommitment.dataSlice;\n          }\n\n          if (configOrCommitment.filters) {\n            extra.filters = configOrCommitment.filters;\n          }\n        }\n      }\n\n      const args = connection._buildArgs([this.PUBKEY.toBase58()], commitment, 'base64', extra);\n\n      const unsafeRes = yield connection._rpcRequest('getProgramAccounts', args);\n      return unsafeRes.result.map(_ref => {\n        let {\n          account: {\n            data,\n            executable,\n            lamports,\n            owner\n          },\n          pubkey\n        } = _ref;\n        return {\n          account: {\n            data: buffer_1.Buffer.from(data[0], 'base64'),\n            executable,\n            lamports,\n            owner: new web3_js_1.PublicKey(owner)\n          },\n          pubkey: new web3_js_1.PublicKey(pubkey)\n        };\n      }).map(_ref2 => {\n        let {\n          pubkey,\n          account\n        } = _ref2;\n        return new accounts_1.Account(pubkey, account);\n      });\n    });\n  }\n\n}\n\nexports.Program = Program;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAOA;;AACA;;AAGA,MAAsBA,OAAtB,CAA6B;AAGI,SAAlBC,kBAAkB,CAACC,KAAD,EAA+B;;AAC5D,aAAO,CAAC,MAAMC,oBAAUF,kBAAV,CAA6BC,KAA7B,EAAoC,KAAKE,MAAzC,CAAP,EAAyD,CAAzD,CAAP;AACD;AAAA;;AAE8B,SAAlBC,kBAAkB,CAC7BC,UAD6B,EAE7BC,kBAF6B,EAE6B;;AAE1D,YAAMC,KAAK,GAA4D,EAAvE;AACA,UAAIC,UAAJ;;AACA,UAAIF,kBAAJ,EAAwB;AACtB,YAAI,OAAOA,kBAAP,KAA8B,QAAlC,EAA4C;AAC1CE,oBAAU,GAAGF,kBAAb;AACD,SAFD,MAEO;AACLE,oBAAU,GAAGF,kBAAkB,CAACE,UAAhC;;AACA,cAAIF,kBAAkB,CAACG,SAAvB,EAAkC;AAChCF,iBAAK,CAACE,SAAN,GAAkBH,kBAAkB,CAACG,SAArC;AACD;;AACD,cAAIH,kBAAkB,CAACI,OAAvB,EAAgC;AAC9BH,iBAAK,CAACG,OAAN,GAAgBJ,kBAAkB,CAACI,OAAnC;AACD;AACF;AACF;;AACD,YAAMC,IAAI,GAAGN,UAAU,CAACO,UAAX,CAAsB,CAAC,KAAKT,MAAL,CAAYU,QAAZ,EAAD,CAAtB,EAAgDL,UAAhD,EAA4D,QAA5D,EAAsED,KAAtE,CAAb;;AACA,YAAMO,SAAS,GAAG,MAAOT,UAAwC,CAACU,WAAzC,CACvB,oBADuB,EAEvBJ,IAFuB,CAAzB;AAKA,aACEG,SAAS,CAACE,MAAV,CAKCC,GALD,CAKK;AAAA,YAAC;AAAEC,iBAAO,EAAE;AAAEC,gBAAF;AAAQC,sBAAR;AAAoBC,oBAApB;AAA8BC;AAA9B,WAAX;AAAkDC;AAAlD,SAAD;AAAA,eAAiE;AACpEL,iBAAO,EAAE;AACPC,gBAAI,EAAEK,gBAAOC,IAAP,CAAYN,IAAI,CAAC,CAAD,CAAhB,EAAqB,QAArB,CADC;AAEPC,sBAFO;AAGPC,oBAHO;AAIPC,iBAAK,EAAE,IAAIpB,mBAAJ,CAAcoB,KAAd;AAJA,WAD2D;AAOpEC,gBAAM,EAAE,IAAIrB,mBAAJ,CAAcqB,MAAd;AAP4D,SAAjE;AAAA,OALL,EAcCN,GAdD,CAcK;AAAA,YAAC;AAAEM,gBAAF;AAAUL;AAAV,SAAD;AAAA,eAAyB,IAAIQ,kBAAJ,CAAYH,MAAZ,EAAoBL,OAApB,CAAzB;AAAA,OAdL,CADF;AAgBD;AAAA;;AAhD0B;;AAA7BS","names":["Program","findProgramAddress","seeds","web3_js_1","PUBKEY","getProgramAccounts","connection","configOrCommitment","extra","commitment","dataSlice","filters","args","_buildArgs","toBase58","unsafeRes","_rpcRequest","result","map","account","data","executable","lamports","owner","pubkey","buffer_1","from","accounts_1","exports"],"sources":["../../src/Program.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}