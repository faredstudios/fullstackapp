{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar _a;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PayoutTicket = exports.PayoutTicketData = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst bs58_1 = __importDefault(require(\"bs58\"));\n\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\n\nconst MetaplexProgram_1 = require(\"../MetaplexProgram\");\n\nconst buffer_1 = require(\"buffer\");\n\nclass PayoutTicketData extends mpl_core_1.Borsh.Data {\n  constructor(args) {\n    super(args);\n    this.key = MetaplexProgram_1.MetaplexKey.PayoutTicketV1;\n  }\n\n}\n\nexports.PayoutTicketData = PayoutTicketData;\n_a = PayoutTicketData;\nPayoutTicketData.SCHEMA = _a.struct([['key', 'u8'], ['recipient', 'pubkeyAsString'], ['amountPaid', 'u64']]);\n\nclass PayoutTicket extends mpl_core_1.Account {\n  constructor(pubkey, info) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(MetaplexProgram_1.MetaplexProgram.PUBKEY)) {\n      throw (0, mpl_core_1.ERROR_INVALID_OWNER)();\n    }\n\n    if (!PayoutTicket.isCompatible(this.info.data)) {\n      throw (0, mpl_core_1.ERROR_INVALID_ACCOUNT_DATA)();\n    }\n\n    this.data = PayoutTicketData.deserialize(this.info.data);\n  }\n\n  static isCompatible(data) {\n    return data[0] === MetaplexProgram_1.MetaplexKey.PayoutTicketV1;\n  }\n\n  static getPayoutTicketsByRecipient(connection, recipient) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return (yield MetaplexProgram_1.MetaplexProgram.getProgramAccounts(connection, {\n        filters: [{\n          memcmp: {\n            offset: 0,\n            bytes: bs58_1.default.encode(buffer_1.Buffer.from([MetaplexProgram_1.MetaplexKey.PayoutTicketV1]))\n          }\n        }, {\n          memcmp: {\n            offset: 1,\n            bytes: new web3_js_1.PublicKey(recipient).toBase58()\n          }\n        }]\n      })).map(account => PayoutTicket.from(account));\n    });\n  }\n\n}\n\nexports.PayoutTicket = PayoutTicket;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AAQA;;AACA;;AAGA,MAAaA,gBAAb,SAAsCC,iBAAMC,IAA5C,CAAsD;AAWpDC,cAAYC,IAAZ,EAAsB;AACpB,UAAMA,IAAN;AACA,SAAKC,GAAL,GAAWC,8BAAYC,cAAvB;AACD;;AAdmD;;AAAtDC;;AACkBR,0BAASS,EAAI,CAACC,MAAL,CAAY,CACnC,CAAC,KAAD,EAAQ,IAAR,CADmC,EAEnC,CAAC,WAAD,EAAc,gBAAd,CAFmC,EAGnC,CAAC,YAAD,EAAe,KAAf,CAHmC,CAAZ,CAAT;;AAgBlB,MAAaC,YAAb,SAAkCV,kBAAlC,CAA2D;AACzDE,cAAYS,MAAZ,EAAkCC,IAAlC,EAA2D;AACzD,UAAMD,MAAN,EAAcC,IAAd;;AAEA,QAAI,CAAC,KAAKC,WAAL,CAAiBR,kCAAgBS,MAAjC,CAAL,EAA+C;AAC7C,YAAM,qCAAN;AACD;;AAED,QAAI,CAACJ,YAAY,CAACK,YAAb,CAA0B,KAAKH,IAAL,CAAUI,IAApC,CAAL,EAAgD;AAC9C,YAAM,4CAAN;AACD;;AAED,SAAKA,IAAL,GAAYjB,gBAAgB,CAACkB,WAAjB,CAA6B,KAAKL,IAAL,CAAUI,IAAvC,CAAZ;AACD;;AAEkB,SAAZD,YAAY,CAACC,IAAD,EAAa;AAC9B,WAAOA,IAAI,CAAC,CAAD,CAAJ,KAAYX,8BAAYC,cAA/B;AACD;;AAEuC,SAA3BY,2BAA2B,CAACC,UAAD,EAAyBC,SAAzB,EAAgD;;AACtF,aAAO,CACL,MAAMf,kCAAgBgB,kBAAhB,CAAmCF,UAAnC,EAA+C;AACnDG,eAAO,EAAE,CAEP;AACEC,gBAAM,EAAE;AACNC,kBAAM,EAAE,CADF;AAENC,iBAAK,EAAEC,eAAKC,MAAL,CAAYC,gBAAOC,IAAP,CAAY,CAACxB,8BAAYC,cAAb,CAAZ,CAAZ;AAFD;AADV,SAFO,EASP;AACEiB,gBAAM,EAAE;AACNC,kBAAM,EAAE,CADF;AAENC,iBAAK,EAAE,IAAIK,mBAAJ,CAAcV,SAAd,EAAyBW,QAAzB;AAFD;AADV,SATO;AAD0C,OAA/C,CADD,EAmBLC,GAnBK,CAmBAC,OAAD,IAAavB,YAAY,CAACmB,IAAb,CAAkBI,OAAlB,CAnBZ,CAAP;AAoBD;AAAA;;AAxCwD;;AAA3D1B","names":["PayoutTicketData","mpl_core_1","Data","constructor","args","key","MetaplexProgram_1","PayoutTicketV1","exports","_a","struct","PayoutTicket","pubkey","info","assertOwner","PUBKEY","isCompatible","data","deserialize","getPayoutTicketsByRecipient","connection","recipient","getProgramAccounts","filters","memcmp","offset","bytes","bs58_1","encode","buffer_1","from","web3_js_1","toBase58","map","account"],"sources":["../../../src/accounts/PayoutTicket.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}