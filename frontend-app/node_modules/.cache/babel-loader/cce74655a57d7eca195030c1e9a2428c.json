{"ast":null,"code":"\"use strict\";\n\nvar _a;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClaimBid = exports.ClaimBidArgs = void 0;\n\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\n\nconst mpl_auction_1 = require(\"@metaplex-foundation/mpl-auction\");\n\nconst spl_token_1 = require(\"@solana/spl-token\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst MetaplexProgram_1 = require(\"../MetaplexProgram\");\n\nclass ClaimBidArgs extends mpl_core_1.Borsh.Data {\n  constructor() {\n    super(...arguments);\n    this.instruction = 6;\n  }\n\n}\n\nexports.ClaimBidArgs = ClaimBidArgs;\n_a = ClaimBidArgs;\nClaimBidArgs.SCHEMA = _a.struct([['instruction', 'u8']]);\n\nclass ClaimBid extends mpl_core_1.Transaction {\n  constructor(options, params) {\n    super(options);\n    const {\n      store,\n      vault,\n      auction,\n      auctionExtended,\n      auctionManager,\n      bidder,\n      bidderPot,\n      bidderPotToken,\n      acceptPayment,\n      tokenMint\n    } = params;\n    const data = ClaimBidArgs.serialize();\n    this.add(new web3_js_1.TransactionInstruction({\n      keys: [{\n        pubkey: acceptPayment,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: bidderPotToken,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: bidderPot,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: auctionManager,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: auction,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: bidder,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: tokenMint,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: vault,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: store,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: mpl_auction_1.AuctionProgram.PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: web3_js_1.SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: auctionExtended,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: MetaplexProgram_1.MetaplexProgram.PUBKEY,\n      data\n    }));\n  }\n\n}\n\nexports.ClaimBid = ClaimBid;","map":{"version":3,"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AAMA;;AAEA,MAAaA,YAAb,SAAkCC,iBAAMC,IAAxC,CAA4C;AAA5CC;;AAGE,uBAAc,CAAd;AACD;;AAJ2C;;AAA5CC;;AACkBJ,sBAASK,EAAI,CAACC,MAAL,CAAY,CAAC,CAAC,aAAD,EAAgB,IAAhB,CAAD,CAAZ,CAAT;;AAiBlB,MAAaC,QAAb,SAA8BN,sBAA9B,CAAyC;AACvCE,cAAYK,OAAZ,EAA4CC,MAA5C,EAAmF;AACjF,UAAMD,OAAN;AACA,UAAM;AACJE,WADI;AAEJC,WAFI;AAGJC,aAHI;AAIJC,qBAJI;AAKJC,oBALI;AAMJC,YANI;AAOJC,eAPI;AAQJC,oBARI;AASJC,mBATI;AAUJC;AAVI,QAWFV,MAXJ;AAaA,UAAMW,IAAI,GAAGpB,YAAY,CAACqB,SAAb,EAAb;AAEA,SAAKC,GAAL,CACE,IAAIC,gCAAJ,CAA2B;AACzBC,UAAI,EAAE,CACJ;AACEC,cAAM,EAAEP,aADV;AAEEQ,gBAAQ,EAAE,KAFZ;AAGEC,kBAAU,EAAE;AAHd,OADI,EAMJ;AACEF,cAAM,EAAER,cADV;AAEES,gBAAQ,EAAE,KAFZ;AAGEC,kBAAU,EAAE;AAHd,OANI,EAWJ;AACEF,cAAM,EAAET,SADV;AAEEU,gBAAQ,EAAE,KAFZ;AAGEC,kBAAU,EAAE;AAHd,OAXI,EAiBJ;AACEF,cAAM,EAAEX,cADV;AAEEY,gBAAQ,EAAE,KAFZ;AAGEC,kBAAU,EAAE;AAHd,OAjBI,EAsBJ;AACEF,cAAM,EAAEb,OADV;AAEEc,gBAAQ,EAAE,KAFZ;AAGEC,kBAAU,EAAE;AAHd,OAtBI,EA2BJ;AACEF,cAAM,EAAEV,MADV;AAEEW,gBAAQ,EAAE,KAFZ;AAGEC,kBAAU,EAAE;AAHd,OA3BI,EAgCJ;AACEF,cAAM,EAAEN,SADV;AAEEO,gBAAQ,EAAE,KAFZ;AAGEC,kBAAU,EAAE;AAHd,OAhCI,EAqCJ;AACEF,cAAM,EAAEd,KADV;AAEEe,gBAAQ,EAAE,KAFZ;AAGEC,kBAAU,EAAE;AAHd,OArCI,EA0CJ;AACEF,cAAM,EAAEf,KADV;AAEEgB,gBAAQ,EAAE,KAFZ;AAGEC,kBAAU,EAAE;AAHd,OA1CI,EA+CJ;AACEF,cAAM,EAAEG,6BAAeC,MADzB;AAEEH,gBAAQ,EAAE,KAFZ;AAGEC,kBAAU,EAAE;AAHd,OA/CI,EAoDJ;AACEF,cAAM,EAAEF,6BADV;AAEEG,gBAAQ,EAAE,KAFZ;AAGEC,kBAAU,EAAE;AAHd,OApDI,EAyDJ;AACEF,cAAM,EAAEK,4BADV;AAEEJ,gBAAQ,EAAE,KAFZ;AAGEC,kBAAU,EAAE;AAHd,OAzDI,EA8DJ;AACEF,cAAM,EAAEZ,eADV;AAEEa,gBAAQ,EAAE,KAFZ;AAGEC,kBAAU,EAAE;AAHd,OA9DI,CADmB;AAqEzBI,eAAS,EAAEC,kCAAgBH,MArEF;AAsEzBT;AAtEyB,KAA3B,CADF;AA0ED;;AA5FsC;;AAAzChB","names":["ClaimBidArgs","mpl_core_1","Data","constructor","exports","_a","struct","ClaimBid","options","params","store","vault","auction","auctionExtended","auctionManager","bidder","bidderPot","bidderPotToken","acceptPayment","tokenMint","data","serialize","add","web3_js_1","keys","pubkey","isSigner","isWritable","mpl_auction_1","PUBKEY","spl_token_1","programId","MetaplexProgram_1"],"sources":["../../../src/transactions/ClaimBid.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}